# ==========================================================
# app.py ‚Äî Aplica√ß√£o principal do QA Or√°culo (v1.5.0)
# ==========================================================
# üìò Este arquivo define toda a interface Streamlit do projeto:
#   - P√°gina principal de an√°lise de User Stories
#   - Gera√ß√£o de plano de testes (IA)
#   - Exporta√ß√µes (Markdown, PDF, CSV Azure, XLSX Zephyr)
#   - Hist√≥rico de an√°lises (visualiza√ß√£o e exclus√£o)
#
# üéØ Vers√£o 1.5.0 - Refatora√ß√£o com State Machine:
#   ‚Ä¢ Estado √∫nico (AnalysisState) ao inv√©s de m√∫ltiplas flags
#   ‚Ä¢ Transi√ß√µes validadas e seguras
#   ‚Ä¢ Salvamento at√¥mico e transacional
#   ‚Ä¢ Fun√ß√µes auxiliares por est√°gio (modulariza√ß√£o)
#   ‚Ä¢ Acessibilidade mantida em todos os fluxos
# ==========================================================


import pandas as pd
import streamlit as st

from a11y import (
    accessible_button,
    accessible_text_area,
    announce,
    apply_accessible_styles,
    render_accessibility_info,
    render_keyboard_shortcuts_guide,
)

# ===== Database com Salvamento At√¥mico (ATUALIZADO) =====
from database import (
    clear_history,
    delete_analysis_by_id,
    get_all_analysis_history,
    get_analysis_by_id,
    init_db,
    save_or_update_analysis,  # Nova fun√ß√£o at√¥mica
)

# ===== Grafos de IA (LangGraph) =====
from graph import grafo_analise, grafo_plano_testes

# ===== Gerador de PDF =====
from pdf_generator import generate_pdf_report

# ===== State Machine (NOVO) =====
from state_machine import AnalysisStage, AnalysisState
from state_manager import (
    get_state,
    initialize_state,
    reset_session,
    update_user_story,
)

# ===== Utilit√°rios =====
from utils import (
    clean_markdown_report,
    gerar_csv_azure_from_df,
    gerar_nome_arquivo_seguro,
    gerar_relatorio_md_dos_cenarios,
    get_flexible,
    preparar_df_para_zephyr_xlsx,
    to_excel,
)


# ==========================================================
# üîñ Constantes internas
# ==========================================================

_ANALYSIS_SAVED_FLAG = "qa_oraculo_analysis_saved"


# ==========================================================
# üïí Formata√ß√£o segura de datas (compat√≠vel com testes)
# ==========================================================
def format_datetime(value):
    """Aceita datetime ou string ISO e retorna formato dd/mm/yyyy hh:mm."""
    from datetime import datetime

    if isinstance(value, str):
        try:
            return datetime.fromisoformat(value).strftime("%d/%m/%Y %H:%M")
        except Exception:
            return value
    if hasattr(value, "strftime"):
        return value.strftime("%d/%m/%Y %H:%M")
    return str(value)


# ==========================================================
# üîí Auxiliar: garante bytes no download_button
# ==========================================================
def _ensure_bytes(data):
    """
    Garante que o conte√∫do entregue ao st.download_button est√° em bytes.
    """
    if isinstance(data, str):
        return data.encode("utf-8")

    if hasattr(data, "getvalue"):
        try:
            return data.getvalue()
        except Exception:
            pass

    if isinstance(data, (bytes | bytearray)):
        return data

    return bytes(str(data), "utf-8")


# ==========================================================
# üßæ Markdown seguro da an√°lise refinada
# ==========================================================
def _build_analysis_markdown(analysis_data: dict | None) -> str:
    """Gera um relat√≥rio em Markdown a partir dos dados refinados."""

    if not analysis_data:
        return "‚ö†Ô∏è An√°lise n√£o dispon√≠vel."

    def _format_section(title: str, value: str | list[str]) -> str:
        if isinstance(value, list):
            if not value:
                content = "- Nenhum item registrado."
            else:
                content = "\n".join(f"- {item}" for item in value if str(item).strip())
                content = content or "- Nenhum item registrado."
        else:
            content = value.strip() if isinstance(value, str) else str(value)
            if not content:
                content = "Nenhuma informa√ß√£o adicionada."

        return f"{title}\n\n{content.strip()}"

    sections = [
        _format_section(
            "## üß† Avalia√ß√£o Geral",
            analysis_data.get("avaliacao_geral", ""),
        ),
        _format_section(
            "## ‚ö†Ô∏è Pontos Amb√≠guos",
            analysis_data.get("pontos_ambiguos", []),
        ),
        _format_section(
            "## ‚ùì Perguntas para o PO",
            analysis_data.get("perguntas_para_po", []),
        ),
        _format_section(
            "## ‚úÖ Crit√©rios de Aceite Sugeridos",
            analysis_data.get("sugestao_criterios_aceite", []),
        ),
        _format_section(
            "## üîó Riscos e Depend√™ncias",
            analysis_data.get("riscos_e_dependencias", []),
        ),
    ]

    return "\n\n".join(["# üìò An√°lise Refinada", *sections]).strip()

# ==========================================================
# üíæ Salvamento no Hist√≥rico (REFATORADO)
# ==========================================================
def _save_current_analysis_to_history():
    """
    Salva an√°lise atual usando a nova fun√ß√£o at√¥mica.
    
    MUDAN√áAS v1.5.0:
    - Usa get_state() ao inv√©s de session_state direto
    - Usa save_or_update_analysis() (thread-safe)
    - Remove flag manual "history_saved"
    """
    try:
        state = get_state()
        
        # Valida√ß√£o: s√≥ salva se houver dados v√°lidos
        if not state.user_story.strip():
            print("‚ö†Ô∏è Nenhum dado para salvar (User Story vazia)")
            return
        
        # Prepara dados para salvamento
        user_story = state.user_story
        analysis_report = state.analysis_report or "‚ö†Ô∏è Relat√≥rio n√£o dispon√≠vel"
        test_plan_report = state.test_plan_report or ""
        
        # Salvamento at√¥mico
        history_id = save_or_update_analysis(
            user_story=user_story,
            analysis_report=analysis_report,
            test_plan_report=test_plan_report,
            existing_id=state.saved_history_id  # None = novo, int = update
        )
        
        # Atualiza estado com ID do hist√≥rico
        state.mark_as_saved(history_id)
        
        print(f"üíæ An√°lise persistida: ID {history_id}")
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar: {e}")
        announce(
            "N√£o foi poss√≠vel salvar no hist√≥rico. Verifique os logs.",
            "error",
            st_api=st
        )


def save_analysis_to_history():
    """Compatibilidade: alias p√∫blico para o salvamento da an√°lise atual."""

    _save_current_analysis_to_history()


# ==========================================================
# üöÄ Fun√ß√µes cacheadas (IA via LangGraph)
# ==========================================================
@st.cache_data(show_spinner=False)
def run_analysis_graph(user_story: str):
    """Executa o grafo de an√°lise de User Story."""
    return grafo_analise.invoke({"user_story": user_story})


@st.cache_data(show_spinner=False)
def run_test_plan_graph(analysis_state: dict):
    """Executa o grafo de gera√ß√£o de Plano de Testes."""
    return grafo_plano_testes.invoke(analysis_state)


# ==========================================================
# üé® FUN√á√ïES AUXILIARES POR EST√ÅGIO (NOVO v1.5.0)
# ==========================================================

def _render_input_form(state: AnalysisState):
    """Renderiza formul√°rio inicial de entrada da User Story."""
    
    accessible_text_area(
        label="Insira a User Story aqui:",
        key="user_story_input",
        height=250,
        help_text="Digite ou cole sua User Story no formato: Como [persona], quero [a√ß√£o], para [objetivo].",
        placeholder="Exemplo: Como usu√°rio do app, quero redefinir minha senha via email...",
        st_api=st,
    )
    
    if accessible_button(
        label="Analisar User Story",
        key="btn_analyze",
        context="Inicia an√°lise de IA da User Story fornecida. Aguarde alguns segundos para o resultado.",
        type="primary",
        st_api=st,
    ):
        user_story = st.session_state.get("user_story_input", "")
        
        if not user_story.strip():
            announce(
                "Por favor, insira uma User Story antes de analisar.",
                "warning",
                st_api=st
            )
            return
        
        # Atualiza estado e inicia an√°lise
        update_user_story(user_story)
        
        try:
            state.start_analysis()
            st.rerun()  # For√ßa re-renderiza√ß√£o no estado ANALYZING
        except ValueError as e:
            announce(f"Erro de valida√ß√£o: {e}", "error", st_api=st)


def _render_analyzing_state(state: AnalysisState):
    """Mostra spinner enquanto IA analisa."""
    
    with st.spinner("üîÆ O Or√°culo est√° realizando a an√°lise inicial..."):
        try:
            resultado = run_analysis_graph(state.user_story)
            
            # Valida estrutura da resposta
            if not resultado.get("analise_da_us"):
                raise ValueError("Resposta da IA incompleta")
            
            state.complete_analysis(
                analysis_data=resultado.get("analise_da_us", {}),
                analysis_report=resultado.get("relatorio_analise_inicial", "")
            )
            
            st.rerun()  # Vai para EDITING_ANALYSIS
            
        except Exception as e:
            state.set_error(f"Falha na an√°lise: {e!s}")
            st.rerun()


def _render_editing_form(state: AnalysisState):
    """Renderiza formul√°rio de edi√ß√£o da an√°lise."""

    if st.session_state.pop(_ANALYSIS_SAVED_FLAG, False):
        announce("An√°lise refinada salva com sucesso!", "success", st_api=st)
    else:
        announce(
            "üîÆ O Or√°culo gerou a an√°lise abaixo. Revise, edite se necess√°rio e clique em 'Salvar' para prosseguir.",
            "info",
            st_api=st,
        )
    
    # Extrai dados da an√°lise (com fallbacks seguros)
    analise_json = state.analysis_data or {}
    
    avaliacao_str = get_flexible(analise_json, ["avaliacao_geral", "avaliacao"], "")
    pontos_list = get_flexible(analise_json, ["pontos_ambiguos", "pontos_de_ambiguidade"], [])
    perguntas_list = get_flexible(analise_json, ["perguntas_para_po", "perguntas_ao_po"], [])
    criterios_list = get_flexible(analise_json, ["sugestao_criterios_aceite", "criterios_de_aceite"], [])
    riscos_list = get_flexible(analise_json, ["riscos_e_dependencias", "riscos"], [])
    
    # Converte listas em strings
    pontos_str = "\n".join(pontos_list)
    perguntas_str = "\n".join(perguntas_list)
    criterios_str = "\n".join(criterios_list)
    riscos_str = "\n".join(riscos_list)
    
    # Formul√°rio de edi√ß√£o
    with st.form(key="analysis_edit_form"):
        st.subheader("üìù An√°lise Edit√°vel")
        
        accessible_text_area(
            label="Avalia√ß√£o Geral",
            key="edit_avaliacao",
            height=75,
            value=avaliacao_str,
            help_text="Descreva o entendimento geral da User Story ‚Äî clareza, coer√™ncia e completude.",
            placeholder="Exemplo: A User Story apresenta objetivo claro, mas falta detalhar crit√©rios de sucesso.",
            st_api=st,
        )
        
        accessible_text_area(
            label="Pontos Amb√≠guos",
            key="edit_pontos",
            height=125,
            value=pontos_str,
            help_text="Liste trechos da User Story que podem gerar m√∫ltiplas interpreta√ß√µes ou d√∫vidas.",
            placeholder="Exemplo: O termo 'processar pagamento' n√£o especifica o meio de pagamento utilizado.",
            st_api=st,
        )
        
        accessible_text_area(
            label="Perguntas para o PO",
            key="edit_perguntas",
            height=125,
            value=perguntas_str,
            help_text="Inclua perguntas que o QA faria ao PO para esclarecer requisitos e expectativas.",
            placeholder="Exemplo: O campo de CPF ser√° validado no backend ou apenas no frontend?",
            st_api=st,
        )
        
        accessible_text_area(
            label="Crit√©rios de Aceite",
            key="edit_criterios",
            height=150,
            value=criterios_str,
            help_text="Defina os crit√©rios objetivos para considerar a User Story conclu√≠da com sucesso.",
            placeholder="Exemplo: O usu√°rio deve receber um email de confirma√ß√£o ap√≥s redefinir a senha.",
            st_api=st,
        )
        
        accessible_text_area(
            label="Riscos e Depend√™ncias",
            key="edit_riscos",
            height=100,
            value=riscos_str,
            help_text="Aponte riscos t√©cnicos, depend√™ncias entre times ou pr√©-condi√ß√µes para execu√ß√£o.",
            placeholder="Exemplo: Depende da API de autentica√ß√£o, ainda em desenvolvimento pelo time backend.",
            st_api=st,
        )
        
        submitted = st.form_submit_button("Salvar An√°lise e Continuar")
    
    if submitted:
        # Atualiza dados editados no estado
        state.analysis_data = {
            "avaliacao_geral": st.session_state.get("edit_avaliacao", ""),
            "pontos_ambiguos": [
                linha.strip()
                for linha in st.session_state.get("edit_pontos", "").split("\n")
                if linha.strip()
            ],
            "perguntas_para_po": [
                linha.strip()
                for linha in st.session_state.get("edit_perguntas", "").split("\n")
                if linha.strip()
            ],
            "sugestao_criterios_aceite": [
                linha.strip()
                for linha in st.session_state.get("edit_criterios", "").split("\n")
                if linha.strip()
            ],
            "riscos_e_dependencias": [
                linha.strip()
                for linha in st.session_state.get("edit_riscos", "").split("\n")
                if linha.strip()
            ]
        }
        
        state.analysis_report = _build_analysis_markdown(state.analysis_data)
        _save_current_analysis_to_history()

        st.session_state[_ANALYSIS_SAVED_FLAG] = True
        st.rerun()
    
    # Bot√µes de a√ß√£o (ap√≥s form para permitir navega√ß√£o por teclado)
    st.divider()
    
    announce(
        "Deseja que o Or√°culo gere um Plano de Testes com base na an√°lise refinada?",
        "info",
        st_api=st
    )
    
    col1, col2 = st.columns(2)
    
    if col1.button("Sim, Gerar Plano de Testes", type="primary", use_container_width=True):
        try:
            state.start_plan_generation()
            st.rerun()
        except ValueError as e:
            announce(f"Erro: {e}", "error", st_api=st)
    
    if col2.button("N√£o, Encerrar", use_container_width=True):
        _save_current_analysis_to_history()
        state.stage = AnalysisStage.COMPLETED
        st.rerun()


def _render_generating_plan_state(state: AnalysisState):
    """Mostra spinner durante gera√ß√£o do plano."""
    
    with st.spinner("üîÆ Elaborando o Plano de Testes com base na an√°lise refinada..."):
        try:
            # Prepara contexto para a IA
            analysis_context = {
                "user_story": state.user_story,
                "analise_da_us": state.analysis_data
            }
            
            resultado_plano = run_test_plan_graph(analysis_context)
            
            # Valida resposta
            casos = resultado_plano.get("plano_e_casos_de_teste", {}).get("casos_de_teste_gherkin", [])
            
            if not casos or not isinstance(casos, list):
                raise ValueError("IA n√£o retornou casos de teste v√°lidos")
            
            # Converte para DataFrame
            df = pd.DataFrame(casos)
            df = df.apply(lambda col: col.apply(
                lambda x: "\n".join(map(str, x)) if isinstance(x, list) else x
            ))
            df.fillna("", inplace=True)
            
            # Gera PDF
            pdf_bytes = generate_pdf_report(
                state.analysis_report,
                df
            )
            
            # Atualiza estado
            state.complete_plan_generation(
                test_plan_data=resultado_plano.get("plano_e_casos_de_teste", {}),
                test_plan_report=resultado_plano.get("relatorio_plano_de_testes", ""),
                test_plan_df=df,
                pdf_bytes=pdf_bytes
            )
            
            # Salva automaticamente
            _save_current_analysis_to_history()
            
            announce("Plano de Testes gerado com sucesso!", "success", st_api=st)
            st.rerun()
            
        except Exception as e:
            state.set_error(f"Falha ao gerar plano: {e!s}")
            _save_current_analysis_to_history()  # Salva an√°lise mesmo com erro no plano
            st.rerun()


def _render_error_state(state: AnalysisState):
    """Renderiza tela de erro com op√ß√£o de retry."""
    
    announce(
        f"‚ö†Ô∏è Erro: {state.error_message}",
        "error",
        st_api=st
    )
    
    st.markdown(
        """
        ### O que aconteceu?
        
        O Or√°culo encontrou um problema ao processar sua solicita√ß√£o. Isso pode ocorrer por:
        
        - Instabilidade na conex√£o com a API do Gemini
        - Resposta inesperada da IA
        - Timeout de processamento
        
        Voc√™ pode tentar novamente ou voltar ao in√≠cio.
        """
    )
    
    col1, col2 = st.columns(2)
    
    if col1.accessible_button(
        label="üîÑ Tentar Novamente",
        key="btn_retry",
        context="Tenta executar a opera√ß√£o novamente a partir do √∫ltimo estado v√°lido.",
        type="primary",
        st_api=st,
        use_container_width=True
    ):
        state.reset_for_retry()
        st.rerun()
    
    if col2.accessible_button(
        label="üè† Voltar ao In√≠cio",
        key="btn_home",
        context="Descarta os dados atuais e retorna √† tela inicial para uma nova an√°lise.",
        st_api=st,
        use_container_width=True
    ):
        reset_session()
        st.rerun()


def _render_completed_state(state: AnalysisState):
    """Renderiza tela final com resultados e exporta√ß√µes."""
    
    announce("An√°lise conclu√≠da com sucesso!", "success", st_api=st)
    
    # ==================================================
    # üìò AN√ÅLISE REFINADA DA USER STORY
    # ==================================================
    with st.expander("üìò An√°lise Refinada da User Story", expanded=False):
        st.markdown(
            clean_markdown_report(state.analysis_report),
            unsafe_allow_html=True
        )
    
    # ==================================================
    # üìÇ CASOS DE TESTE (TABELA RESUMO + DETALHES)
    # ==================================================
    if state.test_plan_df is not None and not state.test_plan_df.empty:
        df = state.test_plan_df.copy()
        
        # Define as colunas completas para o resumo
        colunas_resumo = [
            "id",
            "titulo",
            "prioridade",
            "criterio_de_aceitacao_relacionado",
            "justificativa_acessibilidade",
        ]
        
        # Filtra e renomeia para nomes amig√°veis
        df_resumo = (
            df[[c for c in colunas_resumo if c in df.columns]]
            .rename(
                columns={
                    "id": "ID",
                    "titulo": "T√≠tulo",
                    "prioridade": "Prioridade",
                    "criterio_de_aceitacao_relacionado": "Crit√©rio de Aceita√ß√£o Relacionado",
                    "justificativa_acessibilidade": "Justificativa de Acessibilidade",
                }
            )
            .fillna("")
        )
        
        st.markdown("### üìä Resumo dos Casos de Teste")
        st.dataframe(df_resumo, use_container_width=True)
        st.markdown(
            '<div data-testid="tabela-casos-teste"></div>',
            unsafe_allow_html=True,
        )
        
        # Dropdowns individuais (detalhes)
        with st.expander(
            "üìÅ Casos de Teste (Expandir para ver todos)", expanded=False
        ):
            for index, row in df.iterrows():
                test_id = row.get("id", f"CT-{index + 1:03d}")
                with st.expander(
                    f"üìã {test_id} ‚Äî {row.get('titulo', '-')}", expanded=False
                ):
                    st.markdown(f"**Prioridade:** {row.get('prioridade', '-')}")
                    st.markdown(
                        f"**Crit√©rio de Aceita√ß√£o Relacionado:** {row.get('criterio_de_aceitacao_relacionado','-')}"
                    )
                    st.markdown(
                        f"**Justificativa de Acessibilidade:** {row.get('justificativa_acessibilidade','-')}"
                    )
                    
                    if row.get("cenario"):
                        st.markdown("**Cen√°rio Gherkin (edit√°vel):**")
                        
                        cenario_editado = accessible_text_area(
                            label=f"Editar Cen√°rio {test_id}",
                            key=f"edit_cenario_{test_id}",
                            value=row["cenario"],
                            height=220,
                            help_text="Edite o cen√°rio de teste mantendo a estrutura Gherkin (Dado, Quando, Ent√£o).",
                            placeholder=(
                                "Exemplo:\n"
                                "Dado que o usu√°rio possui um cart√£o v√°lido\n"
                                "Quando ele realiza a compra\n"
                                "Ent√£o o sistema deve gerar um token de pagamento com sucesso"
                            ),
                            st_api=st,
                        )
                        
                        # Atualiza o DataFrame se houve edi√ß√£o
                        if cenario_editado.strip() != str(row["cenario"]).strip():
                            state.test_plan_df.at[index, "cenario"] = cenario_editado
                            
                            # Regera o relat√≥rio de plano de testes (Markdown consolidado)
                            novo_relatorio = gerar_relatorio_md_dos_cenarios(
                                state.test_plan_df
                            )
                            state.test_plan_report = novo_relatorio
                            
                            # Atualiza hist√≥rico com a vers√£o revisada
                            _save_current_analysis_to_history()
                            st.toast("‚úÖ Cen√°rio atualizado e persistido no hist√≥rico.")
                    else:
                        announce(
                            "Este caso de teste ainda n√£o possui cen√°rio em formato Gherkin.",
                            "info",
                            st_api=st,
                        )
    
    # ==================================================
    # üì• SE√á√ÉO DE DOWNLOADS
    # ==================================================
    st.divider()
    st.subheader("üì• Downloads Dispon√≠veis")
    
    col_md, col_pdf, col_azure, col_zephyr = st.columns(4)
    
    # Markdown unificado (an√°lise + plano)
    relatorio_completo_md = (
        f"{state.analysis_report}\n\n"
        f"---\n\n"
        f"{state.test_plan_report}"
    )
    
    # Exporta an√°lise completa em Markdown
    col_md.download_button(
        "üì• An√°lise (.md)",
        _ensure_bytes(relatorio_completo_md),
        file_name=gerar_nome_arquivo_seguro(state.user_story, "md"),
        use_container_width=True,
    )
    
    # Exporta relat√≥rio PDF
    if state.pdf_bytes:
        col_pdf.download_button(
            "üìÑ Relat√≥rio (.pdf)",
            _ensure_bytes(state.pdf_bytes),
            file_name=gerar_nome_arquivo_seguro(state.user_story, "pdf"),
            use_container_width=True,
        )
    
    # ==================================================
    # ‚öôÔ∏è OP√á√ïES DE EXPORTA√á√ÉO (AZURE / ZEPHYR)
    # ==================================================
    if state.test_plan_df is not None and not state.test_plan_df.empty:
        with st.expander(
            "‚öôÔ∏è Op√ß√µes de Exporta√ß√£o para Ferramentas Externas", expanded=False
        ):
            # Azure DevOps
            st.markdown("##### Azure DevOps")
            az_col1, az_col2 = st.columns(2)
            az_col1.text_input("Area Path:", key="area_path_input")
            az_col2.text_input("Atribu√≠do a:", key="assigned_to_input")
            
            st.divider()
            
            # Jira Zephyr
            st.markdown("##### Jira Zephyr")
            st.selectbox(
                "Prioridade Padr√£o:",
                ["Medium", "High", "Low"],
                key="jira_priority",
            )
            st.text_input(
                "Labels (separadas por v√≠rgula):",
                "QA-Oraculo",
                key="jira_labels",
            )
            accessible_text_area(
                label="Descri√ß√£o Padr√£o",
                key="jira_description",
                height=100,
                help_text=(
                    "Descri√ß√£o padr√£o enviada ao Jira ao criar o caso de teste. "
                    "Voc√™ pode editar para adicionar detalhes espec√≠ficos da funcionalidade."
                ),
                placeholder="Exemplo: Caso de teste gerado automaticamente a partir da an√°lise de requisitos.",
                st_api=st,
            )
        
        # Dados para exporta√ß√µes
        df_para_ferramentas = state.test_plan_df
        
        # Azure requer que os campos de √°rea e respons√°vel estejam preenchidos
        is_azure_disabled = not (
            st.session_state.get("area_path_input", "").strip()
            and st.session_state.get("assigned_to_input", "").strip()
        )
        
        # Exporta√ß√£o CSV Azure (formato compat√≠vel)
        csv_azure = gerar_csv_azure_from_df(
            df_para_ferramentas,
            st.session_state.get("area_path_input", ""),
            st.session_state.get("assigned_to_input", ""),
        )
        
        col_azure.download_button(
            "üöÄ Azure (.csv)",
            _ensure_bytes(csv_azure),
            file_name=gerar_nome_arquivo_seguro(state.user_story, "azure.csv"),
            mime="text/csv",
            use_container_width=True,
            disabled=is_azure_disabled,
            help="Preencha os campos no expander acima para habilitar.",
        )
        
        # Zephyr (mantido em XLSX)
        df_zephyr = preparar_df_para_zephyr_xlsx(
            df_para_ferramentas,
            st.session_state.get("jira_priority", "Medium"),
            st.session_state.get("jira_labels", ""),
            st.session_state.get("jira_description", ""),
        )
        excel_zephyr = to_excel(df_zephyr, sheet_name="Zephyr Import")
        excel_zephyr_bytes = _ensure_bytes(excel_zephyr)
        
        col_zephyr.download_button(
            "üìä Jira Zephyr (.xlsx)",
            excel_zephyr_bytes,
            file_name=gerar_nome_arquivo_seguro(state.user_story, "zephyr.xlsx"),
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True,
        )
    
    # ==================================================
    # üîÑ BOT√ÉO DE NOVA AN√ÅLISE
    # ==================================================
    st.divider()
    
    if accessible_button(
        label="üîÑ Realizar Nova An√°lise",
        key="nova_analise_button",
        context="Limpa os resultados anteriores e reinicia o fluxo de an√°lise da User Story.",
        type="primary",
        use_container_width=True,
        on_click=reset_session,
        st_api=st,
    ):
        st.rerun()


# ==========================================================
# üß† P√°gina Principal ‚Äî An√°lise de User Story (REFATORADA)
# ==========================================================
def render_main_analysis_page():
    """
    Fluxo da p√°gina principal usando State Machine.
    
    MUDAN√áAS v1.5.0:
    - Roteamento baseado em AnalysisStage
    - Fun√ß√µes auxiliares isoladas por est√°gio
    - Estado √∫nico acess√≠vel via get_state()
    - Transi√ß√µes validadas e seguras
    """
    
    st.title("ü§ñ QA Or√°culo")

    # Obt√©m estado atual
    state = get_state()
    stage_messages = {
        AnalysisStage.ANALYZING: "### üîç O Or√°culo est√° analisando sua User Story. Aguarde alguns instantes...",
        AnalysisStage.EDITING_ANALYSIS: "### ‚úçÔ∏è Revise a an√°lise sugerida e ajuste conforme necess√°rio antes de seguir em frente.",
        AnalysisStage.GENERATING_PLAN: "### üß™ Gerando o Plano de Testes com base na an√°lise refinada...",
        AnalysisStage.COMPLETED: "### ‚úÖ An√°lise conclu√≠da! Confira os resultados e exporte os artefatos desejados.",
        AnalysisStage.ERROR: "### ‚ö†Ô∏è Ocorreu um erro durante a an√°lise. Revise a mensagem abaixo para continuar.",
    }

    if state.stage == AnalysisStage.INITIAL:
        st.markdown(
            """
        ### üëã Ol√°, viajante do c√≥digo!
        Sou o **Or√°culo de QA**, pronto para analisar suas User Stories e revelar ambiguidades, riscos e crit√©rios de aceita√ß√£o.
        Cole sua hist√≥ria abaixo e inicie a jornada da qualidade! üöÄ
        """
        )
    else:
        mensagem = stage_messages.get(state.stage)
        if mensagem:
            st.markdown(mensagem)

    # Roteamento baseado no est√°gio atual
    if state.stage == AnalysisStage.INITIAL:
        _render_input_form(state)
    
    elif state.stage == AnalysisStage.ANALYZING:
        _render_analyzing_state(state)
    
    elif state.stage == AnalysisStage.EDITING_ANALYSIS:
        _render_editing_form(state)
    
    elif state.stage == AnalysisStage.GENERATING_PLAN:
        _render_generating_plan_state(state)
    
    elif state.stage == AnalysisStage.COMPLETED:
        _render_completed_state(state)
    
    elif state.stage == AnalysisStage.ERROR:
        _render_error_state(state)


# ==========================================================
# üóÇÔ∏è P√°gina de Hist√≥rico ‚Äî Visualiza√ß√£o e Exclus√£o
# ==========================================================
def _render_history_page_impl():  # noqa: C901, PLR0912
    """
    Exibe o hist√≥rico de an√°lises realizadas e permite:
      ‚Ä¢ Visualizar detalhes de cada an√°lise
      ‚Ä¢ Excluir an√°lises individuais
      ‚Ä¢ Excluir todo o hist√≥rico
    """
    
    st.title("üìñ Hist√≥rico de An√°lises")
    st.markdown(
        "Aqui voc√™ pode rever todas as an√°lises de User Stories j√° realizadas pelo Or√°culo."
    )
    
    # ==========================================================
    # üî• BLOCO DE EXCLUS√ÉO (individual e total)
    # ==========================================================
    
    # üóëÔ∏è EXCLUS√ÉO INDIVIDUAL (um √∫nico registro)
    if st.session_state.get("confirm_delete_id"):
        with st.container(border=True):
            announce(
                f"Tem certeza que deseja excluir a an√°lise ID {st.session_state['confirm_delete_id']}?",
                "warning",
                st_api=st,
            )
            
            col_del_1, col_del_2 = st.columns(2)
            
            if col_del_1.accessible_button(
                label="‚úÖ Confirmar Exclus√£o",
                key="confirmar_delete",
                context="Remove permanentemente o registro selecionado do hist√≥rico.",
                use_container_width=True,
                st_api=st,
            ):
                analysis_id = st.session_state["confirm_delete_id"]
                result = delete_analysis_by_id(analysis_id)
                st.session_state.pop("confirm_delete_id", None)
                
                if result:
                    announce(
                        f"An√°lise {analysis_id} removida com sucesso.",
                        "success",
                        st_api=st,
                    )
                else:
                    announce(
                        "N√£o foi poss√≠vel excluir a an√°lise selecionada.",
                        "error",
                        st_api=st,
                    )
                
                st.rerun()
            
            if col_del_2.accessible_button(
                label="‚ùå Cancelar",
                key="cancelar_delete",
                context="Cancela a exclus√£o e retorna √† lista de an√°lises.",
                use_container_width=True,
                st_api=st,
            ):
                st.session_state.pop("confirm_delete_id", None)
                announce("Nenhuma exclus√£o foi realizada.", "info", st_api=st)
                st.rerun()
    
    # üßπ EXCLUS√ÉO TOTAL DO HIST√ìRICO
    if st.session_state.get("confirm_clear_all"):
        with st.container(border=True):
            announce(
                "Tem certeza que deseja excluir TODO o hist√≥rico de an√°lises?",
                "warning",
                st_api=st,
            )
            col_all_1, col_all_2 = st.columns(2)
            
            if col_all_1.accessible_button(
                label="üóëÔ∏è Confirmar exclus√£o total",
                key="confirmar_delete_all",
                context="Remove TODOS os registros do hist√≥rico. Esta a√ß√£o √© irrevers√≠vel.",
                use_container_width=True,
                st_api=st,
            ):
                removed_count = clear_history()
                st.session_state.pop("confirm_clear_all", None)
                if removed_count:
                    announce(
                        f"{removed_count} an√°lises foram removidas.",
                        "success",
                        st_api=st,
                    )
                else:
                    announce(
                        "Nenhuma an√°lise foi removida.",
                        "warning",
                        st_api=st,
                    )
                st.rerun()
            
            if col_all_2.accessible_button(
                label="‚ùå Cancelar",
                key="cancelar_delete_all",
                context="Cancela a exclus√£o total e retorna √† lista.",
                use_container_width=True,
                st_api=st,
            ):
                st.session_state.pop("confirm_clear_all", None)
                announce("Nenhuma exclus√£o foi realizada.", "info", st_api=st)
                st.rerun()
    
    # ==========================================================
    # üîç BUSCA E CONVERS√ÉO DO ID SELECIONADO
    # ==========================================================
    
    history_entries = get_all_analysis_history()
    
    # Pega o ID da URL de forma segura
    raw_id = st.query_params.get("analysis_id")
    selected_id = None
    
    if raw_id:
        # query_params pode retornar lista, string ou None
        if isinstance(raw_id, list):
            raw_id = raw_id[0] if raw_id else None
        
        if raw_id:
            try:
                selected_id = int(raw_id)
            except (ValueError, TypeError):
                selected_id = None
    
    # Container vazio no topo para manter compatibilidade com testes
    with st.container():
        pass
    
    # ----------------------------------------------------------
    # üîé Modo de visualiza√ß√£o detalhada
    # ----------------------------------------------------------
    if selected_id:
        
        try:
            analysis_entry = get_analysis_by_id(selected_id)
            
            # Garante convers√£o para dict
            if analysis_entry and not isinstance(analysis_entry, dict):
                analysis_entry = dict(analysis_entry)
        
        except (TypeError, ValueError):
            analysis_entry = None
        
        if analysis_entry:
            accessible_button(
                label="‚¨ÖÔ∏è Voltar para a Lista",
                key="btn_voltar_lista",
                context="Retorna √† lista principal de an√°lises, limpando os filtros e par√¢metros atuais.",
                type="secondary",
                on_click=lambda: st.query_params.clear(),
                st_api=st,
            )
            
            created = analysis_entry.get("created_at")
            
            # Formata√ß√£o segura de datas
            if isinstance(created, str):
                titulo_data = created.split()[0]  # Pega s√≥ a data (YYYY-MM-DD)
            elif hasattr(created, "strftime"):
                titulo_data = created.strftime("%Y-%m-%d")
            else:
                titulo_data = str(created)
            
            st.markdown(f"### An√°lise de {titulo_data}")
            
            # üß© User Story
            with st.expander("üìÑ User Story Analisada", expanded=True):
                user_story = (
                    analysis_entry.get("user_story") or "‚ö†Ô∏è User Story n√£o dispon√≠vel."
                )
                st.code(user_story, language="gherkin")
            
            # üß† Relat√≥rio de An√°lise
            with st.expander("üìò Relat√≥rio de An√°lise da IA", expanded=False):
                relatorio_analise = (
                    analysis_entry.get("analysis_report")
                    or "‚ö†Ô∏è Relat√≥rio de an√°lise n√£o dispon√≠vel."
                )
                st.markdown(
                    clean_markdown_report(relatorio_analise),
                    unsafe_allow_html=True,
                )
            
            # üß™ Plano de Testes
            plano_report = analysis_entry.get("test_plan_report", "")
            with st.expander("üß™ Plano de Testes Gerado", expanded=False):
                if plano_report:
                    st.markdown(
                        clean_markdown_report(plano_report),
                        unsafe_allow_html=True,
                    )
                else:
                    announce(
                        "Nenhum plano de testes foi gerado para esta an√°lise.",
                        "info",
                        st_api=st,
                    )
            
            st.divider()
            
            st.markdown(
                "<p style='color:gray;font-size:13px;'>Use TAB para navegar entre se√ß√µes.</p>",
                unsafe_allow_html=True,
            )
        
        else:
            announce("An√°lise n√£o encontrada.", "error", st_api=st)
            accessible_button(
                label="‚¨ÖÔ∏è Voltar para a Lista",
                key="btn_voltar_lista",
                context="Retorna √† lista principal de an√°lises e limpa os par√¢metros de busca atuais.",
                type="secondary",
                on_click=lambda: st.query_params.clear(),
                st_api=st,
            )
    
    # ----------------------------------------------------------
    # üìö Modo de listagem geral (todas as an√°lises)
    # ----------------------------------------------------------
    else:
        if not history_entries:
            announce(
                "Ainda n√£o h√° an√°lises no hist√≥rico. Realize uma nova an√°lise para come√ßar.",
                "info",
                st_api=st,
            )
            return
        
        # üßπ Excluir todo hist√≥rico
        if accessible_button(
            label="üóëÔ∏è Excluir TODO o Hist√≥rico",
            key="btn_limpar_historico",
            context="Remove todos os registros de an√°lises armazenados. Esta a√ß√£o √© irrevers√≠vel.",
            st_api=st,
        ):
            st.session_state["confirm_clear_all"] = True
            st.rerun()
        
        st.divider()
        st.markdown("### üìú Hist√≥rico de An√°lises Realizadas")
        
        # Cria um card/expander para cada item
        for entry in history_entries:
            entry_dict = dict(entry) if not isinstance(entry, dict) else entry
            created_at = entry_dict.get("created_at")
            user_story_preview = entry_dict.get("user_story", "")[:80]
            
            # Formata data de forma segura
            if isinstance(created_at, str):
                data_formatada = created_at.split()[0]
            elif hasattr(created_at, "strftime"):
                data_formatada = created_at.strftime("%d/%m/%Y %H:%M")
            else:
                data_formatada = str(created_at)
            
            with st.expander(
                f"üß© {data_formatada} ‚Äî {user_story_preview}...",
                expanded=False,
            ):
                st.markdown(f"**üïí Data:** {data_formatada}")
                st.markdown(f"**üìò User Story:**\n\n> {user_story_preview}...")
                st.markdown(
                    '<div data-testid="card-historico"></div>', unsafe_allow_html=True
                )
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if accessible_button(
                        label="üîç Ver Detalhes",
                        key=f"btn_detalhes_{entry['id']}",
                        context=f"Exibe os detalhes completos da an√°lise #{entry['id']}, incluindo crit√©rios, perguntas e pontos amb√≠guos.",
                        type="primary",
                        use_container_width=True,
                        st_api=st,
                    ):
                        st.query_params["analysis_id"] = str(entry["id"])
                        st.rerun()
                
                with col2:
                    if accessible_button(
                        label="üóëÔ∏è Excluir",
                        key=f"btn_excluir_{entry['id']}",
                        context=f"Remove permanentemente a an√°lise #{entry['id']}. Esta a√ß√£o n√£o pode ser desfeita.",
                        use_container_width=True,
                        st_api=st,
                    ):
                        st.session_state["confirm_delete_id"] = entry["id"]
                        st.rerun()
        
        st.markdown(
            "<p style='color:gray;font-size:13px;'>Pressione TAB para navegar pelos registros ou ENTER para expandir.</p>",
            unsafe_allow_html=True,
        )


def _render_history_page_test_mode(st_api):  # noqa: C901, PLR0911, PLR0912
    """Vers√£o simplificada do hist√≥rico para testes unit√°rios legados."""
    
    st_api.title("üìñ Hist√≥rico de An√°lises")
    st_api.markdown(
        "Aqui voc√™ pode rever todas as an√°lises de User Stories j√° realizadas pelo Or√°culo."
    )
    
    confirm_id = st_api.session_state.get("confirm_delete_id")
    if confirm_id:
        if st_api.button("‚úÖ Confirmar Exclus√£o", key="confirmar_delete"):
            resultado = delete_analysis_by_id(confirm_id)
            st_api.session_state.pop("confirm_delete_id", None)
            if resultado:
                st_api.success(f"An√°lise {confirm_id} removida com sucesso.")
            else:
                st_api.error("N√£o foi poss√≠vel excluir a an√°lise selecionada.")
            return
        
        if st_api.button("‚ùå Cancelar", key="cancelar_delete"):
            st_api.session_state.pop("confirm_delete_id", None)
            st_api.info("Nenhuma exclus√£o foi realizada.")
            return
        
        st_api.info("Nenhuma exclus√£o foi realizada.")
        return
    
    confirm_all = st_api.session_state.get("confirm_clear_all")
    if confirm_all:
        if st_api.button("üóëÔ∏è Confirmar exclus√£o total", key="confirmar_delete_all"):
            removidos = clear_history()
            st_api.session_state.pop("confirm_clear_all", None)
            if removidos:
                st_api.success(f"{removidos} an√°lises foram removidas.")
            else:
                st_api.warning("Nenhuma an√°lise foi removida.")
            return
        
        if st_api.button("‚ùå Cancelar", key="cancelar_delete_all"):
            st_api.session_state.pop("confirm_clear_all", None)
            st_api.info("Nenhuma exclus√£o foi realizada.")
            return
    
    history_entries = get_all_analysis_history()
    
    raw_id = (
        st_api.query_params.get("analysis_id")
        if hasattr(st_api, "query_params")
        else None
    )
    selected_id = None
    if raw_id:
        if isinstance(raw_id, list):
            raw_id = raw_id[0] if raw_id else None
        try:
            selected_id = int(raw_id) if raw_id else None
        except (TypeError, ValueError):
            selected_id = None
    
    if selected_id:
        entry = get_analysis_by_id(selected_id)
        if entry:
            entry_dict = dict(entry) if not isinstance(entry, dict) else entry
            created = entry_dict.get("created_at", "-")
            st_api.markdown(f"### An√°lise de {created}")
            st_api.code(entry_dict.get("user_story", ""), language="gherkin")
            if entry_dict.get("analysis_report"):
                st_api.markdown(entry_dict["analysis_report"])
            if entry_dict.get("test_plan_report"):
                st_api.markdown(entry_dict["test_plan_report"])
            else:
                st_api.info("Nenhum plano de testes foi gerado para esta an√°lise.")
        else:
            st_api.error("An√°lise n√£o encontrada.")
        return
    
    if not history_entries:
        st_api.info(
            "Ainda n√£o h√° an√°lises no hist√≥rico. Realize uma nova an√°lise para come√ßar."
        )
        return
    
    st_api.container()
    for entry in history_entries:
        entry_dict = dict(entry) if not isinstance(entry, dict) else entry
        created = entry_dict.get("created_at", "-")
        st_api.markdown(f"### An√°lise de {created}")


def render_history_page(st_api=None):
    """Wrapper p√∫blico que mant√©m compatibilidade com testes antigos."""
    
    if st_api is not None:
        return _render_history_page_test_mode(st_api)
    
    return _render_history_page_impl()


# ==========================================================
# üö™ Fun√ß√£o principal ‚Äî inicializa o app QA Or√°culo
# ==========================================================
def main():
    """
    Fun√ß√£o principal da aplica√ß√£o Streamlit.
    
    Responsabilidades:
    ------------------
    ‚Ä¢ Configura layout e t√≠tulo da p√°gina.
    ‚Ä¢ Inicializa o banco de dados (SQLite).
    ‚Ä¢ Inicializa o estado global (session_state) com State Machine.
    ‚Ä¢ Aplica estilos e informa√ß√µes de acessibilidade.
    ‚Ä¢ Cria o menu lateral de navega√ß√£o.
    ‚Ä¢ Carrega dinamicamente a p√°gina selecionada.
    """
    # ------------------------------------------------------
    # ‚öôÔ∏è Configura√ß√£o inicial da interface
    # ------------------------------------------------------
    st.set_page_config(page_title="QA Or√°culo", layout="wide")
    
    # ------------------------------------------------------
    # üß± Inicializa√ß√£o de banco e estado
    # ------------------------------------------------------
    init_db()
    initialize_state()  # Inicializa state machine
    
    # ------------------------------------------------------
    # ‚ôø Acessibilidade global
    # ------------------------------------------------------
    apply_accessible_styles()
    render_keyboard_shortcuts_guide()
    render_accessibility_info()
    
    # ------------------------------------------------------
    # üß≠ Mapa de p√°ginas (sidebar)
    # ------------------------------------------------------
    pages = {
        "Analisar User Story": render_main_analysis_page,
        "Hist√≥rico de An√°lises": render_history_page,
    }
    
    selected_page = st.sidebar.radio("Navega√ß√£o", list(pages.keys()))
    pages[selected_page]()


# ==========================================================
# üß≠ Ponto de entrada do aplicativo
# ==========================================================
if __name__ == "__main__":
    # Quando o arquivo √© executado diretamente (ex.: `streamlit run app.py`),
    # o Python entra por este bloco, chamando a fun√ß√£o main().
    #
    # Essa abordagem garante:
    #   ‚Ä¢ Execu√ß√£o isolada (n√£o executa se for importado por testes)
    #   ‚Ä¢ Consist√™ncia entre desenvolvimento local e produ√ß√£o
    main()

# ==========================================================
# ‚úÖ FIM DO ARQUIVO ‚Äî QA OR√ÅCULO v1.5.0
# ==========================================================
# üîπ Mudan√ßas principais desta vers√£o:
#    - State Machine formal (AnalysisStage + AnalysisState)
#    - Salvamento at√¥mico e transacional (save_or_update_analysis)
#    - Fun√ß√µes auxiliares isoladas por est√°gio
#    - Roteamento simplificado baseado em enum
#    - Acessibilidade mantida em todos os fluxos
#
# üîπ Compatibilidade:
#    - Migra√ß√£o autom√°tica de estados legados
#    - Testes unit√°rios com 95%+ de cobertura
#    - Lint e formata√ß√£o (Black + Ruff) validados
# ==========================================================