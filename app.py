# ==========================================================
# app.py ‚Äî Aplica√ß√£o principal do QA Or√°culo
# ==========================================================
# üìò Este arquivo define toda a interface Streamlit do projeto:
#   - P√°gina principal de an√°lise de User Stories
#   - Gera√ß√£o de plano de testes (IA)
#   - Exporta√ß√µes (Markdown, PDF, CSV Azure, XLSX Zephyr)
#   - Hist√≥rico de an√°lises (visualiza√ß√£o e exclus√£o)
#
# üéØ Princ√≠pios (QA Or√°culo):
#   ‚Ä¢ C√≥digo modular (fun√ß√µes separadas por responsabilidade)
#   ‚Ä¢ Acessibilidade + automa√ß√£o de testes (data-testid / navega√ß√£o teclado)
#   ‚Ä¢ Preparado para testes unit√°rios e E2E
#   ‚Ä¢ Coment√°rios did√°ticos onde a l√≥gica n√£o for √≥bvia
# ==========================================================

import pandas as pd
import streamlit as st

# ===== Reexporta√ß√µes para compatibilidade com testes =====
# Os testes (tests/test_app_history_delete.py) fazem patch direto em:
# - app.delete_analysis_by_id
# - app.clear_history
# Por isso reexportamos estas fun√ß√µes do database aqui.
# Demais fun√ß√µes do banco: leitura/consulta e persist√™ncia no hist√≥rico
from database import (
    clear_history,
    delete_analysis_by_id,
    get_all_analysis_history,
    get_analysis_by_id,
    init_db,
    save_analysis_to_history,
)

# Grafos de IA (LangGraph) ‚Äî invocados nas fun√ß√µes cacheadas
from graph import grafo_analise, grafo_plano_testes

# Gerador de PDF ‚Äî consolida an√°lise e plano de testes em um relat√≥rio
from pdf_generator import generate_pdf_report

# Estado global e reset ‚Äî para nova an√°lise sem resqu√≠cios
from state_manager import initialize_state, reset_session

# Utilit√°rios ‚Äî helpers de exporta√ß√£o, normaliza√ß√£o e formata√ß√£o
from utils import (
    clean_markdown_report,
    gerar_csv_azure_from_df,  # ‚úÖ Exportador CSV (Azure DevOps)
    gerar_nome_arquivo_seguro,
    get_flexible,
    preparar_df_para_zephyr_xlsx,
    to_excel,
)


# ==========================================================
# üîí Auxiliar: garante bytes no download_button
# ==========================================================
def _ensure_bytes(data):
    """
    Garante que o conte√∫do entregue ao st.download_button est√° em bytes.

    Por qu√™?
    - O Streamlit aceita bytes/bytearray como conte√∫do bin√°rio.
    - Aqui convertemos strings, objetos com getvalue() (ex. BytesIO),
      e qualquer outro tipo para bytes de forma segura.
    """
    if isinstance(data, str):
        return data.encode("utf-8")

    if hasattr(data, "getvalue"):
        try:
            return data.getvalue()
        except Exception:
            # Se getvalue falhar, cai para as alternativas abaixo
            pass

    if isinstance(data, (bytes, bytearray)):
        return data

    # Fallback absoluto ‚Äî converte para string e depois para bytes
    return bytes(str(data), "utf-8")


# ==========================================================
# üöÄ Fun√ß√µes cacheadas (IA via LangGraph)
# ==========================================================
@st.cache_data(show_spinner=False)
def run_analysis_graph(user_story: str):
    """
    Executa o grafo de an√°lise de User Story.
    Retorna um dicion√°rio com:
      - 'analise_da_us': blocos estruturados (avaliacao/pontos/riscos/criterios/perguntas)
      - 'relatorio_analise_inicial': texto consolidado em Markdown
    """
    return grafo_analise.invoke({"user_story": user_story})


@st.cache_data(show_spinner=False)
def run_test_plan_graph(analysis_state: dict):
    """
    Executa o grafo de gera√ß√£o de Plano de Testes.
    Espera receber o estado de an√°lise refinado.
    Retorna:
      - 'plano_e_casos_de_teste' com 'casos_de_teste_gherkin' (lista de cen√°rios)
      - 'relatorio_plano_de_testes' (Markdown)
    """
    return grafo_plano_testes.invoke(analysis_state)


# ==========================================================
# üß† P√°gina Principal ‚Äî An√°lise de User Story
# ==========================================================
def render_main_analysis_page():  # noqa: C901, PLR0912, PLR0915
    """
    Fluxo da p√°gina principal:

    1) Entrada da User Story (text_area) + Execu√ß√£o da an√°lise de IA.
    2) Edi√ß√£o humana dos blocos sugeridos (form).
    3) Gera√ß√£o do Plano de Testes (IA) com base na an√°lise refinada.
    4) Exporta√ß√µes (MD, PDF, CSV Azure, XLSX Zephyr).
    5) Bot√£o para iniciar uma nova an√°lise (reset).
    """
    st.title("ü§ñ QA Or√°culo")
    st.markdown(
        "Seja bem-vindo! Como seu Assistente de QA S√™nior, estou aqui para apoiar na revis√£o de User Stories. "
        "Cole uma abaixo e vamos come√ßar."
    )

    # ------------------------------------------------------
    # 1) Entrada e execu√ß√£o da an√°lise inicial
    # ------------------------------------------------------
    if not st.session_state.get("analysis_finished", False):

        # Se ainda n√£o h√° an√°lise no estado, exibimos o input inicial
        if not st.session_state.get("analysis_state"):
            st.text_area(
                "Insira a User Story aqui:", height=250, key="user_story_input"
            )

            # Bot√£o que dispara a an√°lise inicial usando o grafo
            if st.button("Analisar User Story", type="primary"):
                user_story_txt = st.session_state.get("user_story_input", "")

                if user_story_txt.strip():
                    with st.spinner(
                        "üîÆ O Or√°culo est√° realizando a an√°lise inicial..."
                    ):
                        resultado_analise = run_analysis_graph(user_story_txt)

                        # Guarda o resultado bruto da IA para edi√ß√£o posterior
                        st.session_state["analysis_state"] = resultado_analise

                        # Enquanto a edi√ß√£o n√£o √© confirmada, n√£o mostramos o bot√£o de gerar o plano
                        st.session_state["show_generate_plan_button"] = False

                        # Re-renderiza a p√°gina para exibir a se√ß√£o de edi√ß√£o
                        st.rerun()
                else:
                    st.warning("Por favor, insira uma User Story antes de analisar.")

        # ------------------------------------------------------
        # 2) Edi√ß√£o dos blocos gerados pela IA
        # ------------------------------------------------------
        if st.session_state.get("analysis_state"):
            st.divider()

            # Enquanto a edi√ß√£o n√£o for salva, mostramos o formul√°rio edit√°vel
            if not st.session_state.get("show_generate_plan_button"):
                st.info(
                    "üîÆ O Or√°culo gerou a an√°lise abaixo. Revise, edite se necess√°rio e clique em 'Salvar' para prosseguir."
                )

                # Extrai o bloco 'analise_da_us' (estrutura recomendada)
                analise_json = st.session_state.get("analysis_state", {}).get(
                    "analise_da_us", {}
                )

                # Usa get_flexible para aceitar varia√ß√µes de chave que a IA pode devolver
                avaliacao_str = get_flexible(
                    analise_json, ["avaliacao_geral", "avaliacao"], ""
                )
                pontos_list = get_flexible(
                    analise_json, ["pontos_ambiguos", "pontos_de_ambiguidade"], []
                )
                perguntas_list = get_flexible(
                    analise_json, ["perguntas_para_po", "perguntas_ao_po"], []
                )
                criterios_list = get_flexible(
                    analise_json,
                    ["sugestao_criterios_aceite", "criterios_de_aceite"],
                    [],
                )
                riscos_list = get_flexible(
                    analise_json, ["riscos_e_dependencias", "riscos"], []
                )

                # Converte listas em strings com quebra de linha para o form
                pontos_str = "\n".join(pontos_list)
                perguntas_str = "\n".join(perguntas_list)
                criterios_str = "\n".join(criterios_list)
                riscos_str = "\n".join(riscos_list)

                # Formul√°rio de edi√ß√£o ‚Äî decis√£o de UX:
                #   editar tudo numa √∫nica tela para facilitar a revis√£o humana.
                with st.form(key="analysis_edit_form"):
                    st.subheader("üìù An√°lise Edit√°vel")

                    st.text_area(
                        "Avalia√ß√£o Geral",
                        value=avaliacao_str,
                        key="edit_avaliacao",
                        height=75,
                    )

                    st.text_area(
                        "Pontos Amb√≠guos",
                        value=pontos_str,
                        key="edit_pontos",
                        height=125,
                    )

                    st.text_area(
                        "Perguntas para PO",
                        value=perguntas_str,
                        key="edit_perguntas",
                        height=125,
                    )

                    st.text_area(
                        "Crit√©rios de Aceite",
                        value=criterios_str,
                        key="edit_criterios",
                        height=150,
                    )

                    st.text_area(
                        "Riscos e Depend√™ncias",
                        value=riscos_str,
                        key="edit_riscos",
                        height=100,
                    )

                    submitted = st.form_submit_button("Salvar An√°lise e Continuar")

                # Quando o form √© submetido, persistimos as edi√ß√µes no estado
                if submitted:
                    st.session_state.setdefault("analysis_state", {})
                    st.session_state["analysis_state"].setdefault("analise_da_us", {})
                    bloco = st.session_state["analysis_state"]["analise_da_us"]

                    # Salva os campos editados ‚Äî sempre normalizando para lista onde necess√°rio
                    bloco["avaliacao_geral"] = st.session_state.get(
                        "edit_avaliacao", ""
                    )

                    bloco["pontos_ambiguos"] = [
                        linha.strip()
                        for linha in st.session_state.get("edit_pontos", "").split("\n")
                        if linha.strip()
                    ]

                    bloco["perguntas_para_po"] = [
                        linha.strip()
                        for linha in st.session_state.get("edit_perguntas", "").split(
                            "\n"
                        )
                        if linha.strip()
                    ]

                    bloco["sugestao_criterios_aceite"] = [
                        linha.strip()
                        for linha in st.session_state.get("edit_criterios", "").split(
                            "\n"
                        )
                        if linha.strip()
                    ]

                    bloco["riscos_e_dependencias"] = [
                        linha.strip()
                        for linha in st.session_state.get("edit_riscos", "").split("\n")
                        if linha.strip()
                    ]

                    # Agora podemos avan√ßar para a gera√ß√£o de plano
                    st.session_state["show_generate_plan_button"] = True

                    st.success("An√°lise refinada salva com sucesso!")
                    st.rerun()

        # ------------------------------------------------------
        # 3) Gera√ß√£o do Plano de Testes (ap√≥s edi√ß√£o)
        # ------------------------------------------------------
        if st.session_state.get("show_generate_plan_button"):

            # Mostra o relat√≥rio de an√°lise (texto da IA)
            with st.expander("1. An√°lise Refinada da User Story", expanded=True):
                st.markdown(
                    st.session_state.get("analysis_state", {}).get(
                        "relatorio_analise_inicial", ""
                    )
                )

            st.info(
                "Deseja que o Or√°culo gere um Plano de Testes com base na an√°lise refinada?"
            )
            col1, col2, _ = st.columns([1, 1, 2])

            # Bot√£o para gerar o plano de testes com LangGraph
            if col1.button(
                "Sim, Gerar Plano de Testes", type="primary", use_container_width=True
            ):
                with st.spinner(
                    "üîÆ Elaborando o Plano de Testes com base na an√°lise refinada..."
                ):
                    resultado_plano = run_test_plan_graph(
                        st.session_state.get("analysis_state", {})
                    )

                    # Extrai lista de casos Gherkin (se houver)
                    casos_de_teste = resultado_plano.get(
                        "plano_e_casos_de_teste", {}
                    ).get("casos_de_teste_gherkin", [])

                    if not casos_de_teste or not isinstance(casos_de_teste, list):
                        # Caso a IA n√£o retorne o formato esperado
                        st.error(
                            "O Or√°culo n√£o conseguiu gerar um plano de testes estruturado."
                        )
                        st.session_state["test_plan_report"] = resultado_plano.get(
                            "relatorio_plano_de_testes", "Falha na gera√ß√£o do plano."
                        )

                    else:
                        # Guarda o relat√≥rio detalhado do plano
                        st.session_state["test_plan_report"] = resultado_plano.get(
                            "relatorio_plano_de_testes"
                        )

                        # Converte a lista de cen√°rios para DataFrame
                        df = pd.DataFrame(casos_de_teste)

                        # Normaliza colunas que podem vir como listas (v√°rias linhas)
                        df_clean = df.apply(
                            lambda col: col.apply(
                                lambda x: (
                                    "\n".join(map(str, x)) if isinstance(x, list) else x
                                )
                            )
                        )
                        df_clean.fillna("", inplace=True)

                        st.session_state["test_plan_df"] = df_clean

                        # Gera PDF consolidando an√°lise + plano
                        pdf_bytes = generate_pdf_report(
                            st.session_state.get("analysis_state", {}).get(
                                "relatorio_analise_inicial", ""
                            ),
                            df_clean,
                        )
                        st.session_state["pdf_report_bytes"] = pdf_bytes

                    # Marca o fluxo como finalizado (mostra se√ß√£o de exporta√ß√µes)
                    st.session_state["analysis_finished"] = True

                    # Persiste no hist√≥rico (para consulta futura)
                    user_story_to_save = st.session_state.get("user_story_input", "")
                    analysis_report_to_save = st.session_state.get(
                        "analysis_state", {}
                    ).get("relatorio_analise_inicial", "")
                    test_plan_report_to_save = st.session_state.get(
                        "test_plan_report", ""
                    )

                    save_analysis_to_history(
                        user_story_to_save,
                        analysis_report_to_save,
                        test_plan_report_to_save,
                    )

                    # Re-renderiza para exibir a se√ß√£o de downloads
                    st.rerun()
                    return  # garante que o fluxo acima finalize aqui

            # Bot√£o para encerrar sem gerar plano (mas salvando an√°lise)
            if col2.button("N√£o, Encerrar", use_container_width=True):
                st.session_state["analysis_finished"] = True

                user_story_to_save = st.session_state.get("user_story_input", "")
                analysis_report_to_save = st.session_state.get(
                    "analysis_state", {}
                ).get("relatorio_analise_inicial", "")
                test_plan_report_to_save = (
                    st.session_state.get("test_plan_report", "")
                    if st.session_state.get("test_plan_report")
                    else ""
                )

                save_analysis_to_history(
                    user_story_to_save,
                    analysis_report_to_save,
                    test_plan_report_to_save,
                )

                st.rerun()
    # ------------------------------------------------------
    # 4) Tela de resultados e exporta√ß√µes
    # ------------------------------------------------------
    if st.session_state.get("analysis_finished"):
        st.success("An√°lise conclu√≠da com sucesso!")

        # Exibe os blocos de relat√≥rio e plano de testes (se existirem)
        if st.session_state.get("analysis_state"):
            with st.expander("1. An√°lise Refinada da User Story", expanded=True):
                st.markdown(
                    st.session_state.get("analysis_state", {}).get(
                        "relatorio_analise_inicial", ""
                    )
                )

        if st.session_state.get("test_plan_report"):
            with st.expander("2. Plano de Testes Detalhado", expanded=True):
                cleaned_report = clean_markdown_report(
                    st.session_state.get("test_plan_report", "")
                )
                st.markdown(cleaned_report)

                # Mostra tabela e cen√°rios em Gherkin
                if (
                    st.session_state.get("test_plan_df") is not None
                    and not st.session_state.get("test_plan_df").empty
                ):
                    st.dataframe(
                        st.session_state.get("test_plan_df"), use_container_width=True
                    )
                    st.subheader("üìú Cen√°rios em Gherkin")
                    for _, row in st.session_state["test_plan_df"].iterrows():
                        if row.get("cenario"):
                            st.code(row["cenario"], language="gherkin")

        # ------------------------------------------------------
        # Se√ß√£o de downloads
        # ------------------------------------------------------
        st.divider()
        st.subheader("Downloads Dispon√≠veis")

        col_md, col_pdf, col_azure, col_zephyr = st.columns(4)

        # Markdown unificado (an√°lise + plano)
        relatorio_completo_md = (
            f"{st.session_state.get('analysis_state', {}).get('relatorio_analise_inicial', '')}\n\n"
            f"---\n\n"
            f"{st.session_state.get('test_plan_report', '')}"
        )

        # üì• Exporta an√°lise completa em Markdown
        col_md.download_button(
            "üì• An√°lise (.md)",
            _ensure_bytes(relatorio_completo_md),
            file_name=gerar_nome_arquivo_seguro(
                st.session_state.get("user_story_input", ""), "md"
            ),
            use_container_width=True,
        )

        # üìÑ Exporta relat√≥rio PDF se dispon√≠vel
        if st.session_state.get("pdf_report_bytes"):
            col_pdf.download_button(
                "üìÑ Relat√≥rio (.pdf)",
                _ensure_bytes(st.session_state.get("pdf_report_bytes")),
                file_name=gerar_nome_arquivo_seguro(
                    st.session_state.get("user_story_input", ""), "pdf"
                ),
                use_container_width=True,
            )

        # ------------------------------------------------------
        # Expander com configura√ß√µes de exporta√ß√£o
        # ------------------------------------------------------
        if (
            st.session_state.get("test_plan_df") is not None
            and not st.session_state.get("test_plan_df").empty
        ):
            with st.expander(
                "üì§ Op√ß√µes de Exporta√ß√£o para Ferramentas Externas", expanded=True
            ):
                # Azure DevOps
                st.markdown("##### Azure DevOps")
                az_col1, az_col2 = st.columns(2)
                az_col1.text_input("Area Path:", key="area_path_input")
                az_col2.text_input("Atribu√≠do a:", key="assigned_to_input")

                st.divider()

                # Jira Zephyr
                st.markdown("##### Jira Zephyr")
                st.selectbox(
                    "Prioridade Padr√£o:",
                    ["Medium", "High", "Low"],
                    key="jira_priority",
                )
                st.text_input(
                    "Labels (separadas por v√≠rgula):",
                    "QA-Oraculo",
                    key="jira_labels",
                )
                st.text_area(
                    "Descri√ß√£o Padr√£o:",
                    "Caso de teste gerado pelo QA Or√°culo.",
                    key="jira_description",
                )

            # ------------------------------------------------------
            # Dados para exporta√ß√µes
            # ------------------------------------------------------
            df_para_ferramentas = st.session_state.get("test_plan_df", pd.DataFrame())

            # Azure requer que os campos de √°rea e respons√°vel estejam preenchidos
            is_azure_disabled = not (
                st.session_state.get("area_path_input", "").strip()
                and st.session_state.get("assigned_to_input", "").strip()
            )

            # ‚úÖ NOVO BLOCO: Exporta√ß√£o CSV Azure (formato compat√≠vel)
            csv_azure = gerar_csv_azure_from_df(
                df_para_ferramentas,
                st.session_state.get("area_path_input", ""),
                st.session_state.get("assigned_to_input", ""),
            )

            col_azure.download_button(
                "üöÄ Azure (.csv)",
                _ensure_bytes(csv_azure),
                file_name=gerar_nome_arquivo_seguro(
                    st.session_state.get("user_story_input", ""), "azure.csv"
                ),
                mime="text/csv",
                use_container_width=True,
                disabled=is_azure_disabled,
                help="Preencha os campos no expander acima para habilitar.",
            )

            # Zephyr (mantido em XLSX)
            df_zephyr = preparar_df_para_zephyr_xlsx(
                df_para_ferramentas,
                st.session_state.get("jira_priority", "Medium"),
                st.session_state.get("jira_labels", ""),
                st.session_state.get("jira_description", ""),
            )
            excel_zephyr = to_excel(df_zephyr, sheet_name="Zephyr Import")
            excel_zephyr_bytes = _ensure_bytes(excel_zephyr)

            col_zephyr.download_button(
                "üìä Jira Zephyr (.xlsx)",
                excel_zephyr_bytes,
                file_name=gerar_nome_arquivo_seguro(
                    st.session_state.get("user_story_input", ""), "zephyr.xlsx"
                ),
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
            )

        # ------------------------------------------------------
        # Bot√£o para resetar e reiniciar o fluxo
        # ------------------------------------------------------
        st.divider()
        st.button(
            "üîÑ Realizar Nova An√°lise",
            type="primary",
            use_container_width=True,
            on_click=reset_session,
            key="nova_analise_button",
        )


# ==========================================================
# üóÇÔ∏è P√°gina de Hist√≥rico ‚Äî Visualiza√ß√£o e Exclus√£o
# ==========================================================
def render_history_page():  # noqa: C901, PLR0912, PLR0915
    """
    Exibe o hist√≥rico de an√°lises realizadas e permite:
      ‚Ä¢ Visualizar detalhes de cada an√°lise
      ‚Ä¢ Excluir an√°lises individuais
      ‚Ä¢ Excluir todo o hist√≥rico

    üß† Dica QA Or√°culo:
    -------------------
    O Streamlit desenha os elementos na ordem em que aparecem no c√≥digo.
    Portanto, se quisermos que os avisos de confirma√ß√£o apare√ßam no TOPO,
    precisamos renderiz√°-los antes da listagem dos hist√≥ricos.
    """

    st.title("üìñ Hist√≥rico de An√°lises")
    st.markdown(
        "Aqui voc√™ pode rever todas as an√°lises de User Stories j√° realizadas pelo Or√°culo."
    )

    # ==========================================================
    # üî• BLOCO DE EXCLUS√ÉO (individual e total)
    # ==========================================================
    # Este bloco aparece no topo da p√°gina para que as confirma√ß√µes
    # sejam renderizadas logo abaixo do t√≠tulo. Ele tamb√©m executa
    # as a√ß√µes de exclus√£o esperadas pelos testes unit√°rios.
    # ----------------------------------------------------------
    # Contexto dos testes (test_app_history_delete.py):
    # - delete_analysis_by_id() √© mockado para retornar True ou False.
    # - clear_history() √© mockado para retornar um n√∫mero (int).
    # Os testes verificam:
    #   ‚úÖ sucesso ‚Üí st.success("... removidas.")
    #   ‚ùå falha   ‚Üí st.error("Falha ao excluir ...")
    # ----------------------------------------------------------

    # üóëÔ∏è EXCLUS√ÉO INDIVIDUAL (um √∫nico registro)
    if st.session_state.get("confirm_delete_id"):
        with st.container(border=True):
            st.warning(
                f"Tem certeza que deseja excluir a an√°lise ID "
                f"{st.session_state['confirm_delete_id']}?"
            )

            # Usamos duas colunas para posicionar os bot√µes lado a lado.
            col_del_1, col_del_2 = st.columns(2)

            # ----------------------------------------------------------
            # ‚úÖ CONFIRMAR EXCLUS√ÉO INDIVIDUAL
            # ----------------------------------------------------------
            # Ao clicar, chamamos delete_analysis_by_id()
            # (que nos testes pode retornar True ou False).
            if col_del_1.button(
                "‚úÖ Confirmar Exclus√£o",
                key="confirmar_delete",
                use_container_width=True,
            ):
                result = delete_analysis_by_id(st.session_state["confirm_delete_id"])
                st.session_state.pop("confirm_delete_id", None)

                # Se a exclus√£o for bem-sucedida (mock=True)
                if result:
                    st.success("An√°lise exclu√≠da com sucesso!")
                else:
                    # Se mock=False ‚Üí exibe erro (compat√≠vel com teste_excluir_individual_falha)
                    st.error("Falha ao excluir a an√°lise.")

                # Atualiza a tela ap√≥s a a√ß√£o
                st.rerun()

            # ----------------------------------------------------------
            # ‚ùå CANCELAR EXCLUS√ÉO INDIVIDUAL
            # ----------------------------------------------------------
            # Limpa o estado e informa cancelamento
            if col_del_2.button(
                "‚ùå Cancelar", key="cancelar_delete", use_container_width=True
            ):
                st.session_state.pop("confirm_delete_id", None)
                st.info("A exclus√£o foi cancelada.")
                st.rerun()

    # ----------------------------------------------------------
    # üßπ EXCLUS√ÉO TOTAL DO HIST√ìRICO
    # ----------------------------------------------------------
    # A l√≥gica √© semelhante, mas aqui o clear_history()
    # retorna um n√∫mero de registros exclu√≠dos.
    # Os testes esperam que este n√∫mero apare√ßa na mensagem
    # st.success(f"{count} an√°lises foram removidas.")
    # ----------------------------------------------------------
    if st.session_state.get("confirm_clear_all"):
        with st.container(border=True):
            st.warning(
                "Tem certeza que deseja excluir **TODO o hist√≥rico** de an√°lises?"
            )
            col_all_1, col_all_2 = st.columns(2)

            # ‚úÖ CONFIRMAR EXCLUS√ÉO TOTAL
            if col_all_1.button(
                "üóëÔ∏è Confirmar exclus√£o total",
                key="confirmar_delete_all",
                use_container_width=True,
            ):
                # clear_history() retorna o n√∫mero de linhas deletadas (mockado nos testes)
                removed_count = clear_history()

                # Remove o flag de confirma√ß√£o do estado global
                st.session_state.pop("confirm_clear_all", None)
                st.success(f"{removed_count} an√°lises foram removidas.")

                st.rerun()

            # ‚ùå CANCELAR EXCLUS√ÉO TOTAL
            if col_all_2.button(
                "‚ùå Cancelar", key="cancelar_delete_all", use_container_width=True
            ):
                st.session_state.pop("confirm_clear_all", None)
                st.info("A exclus√£o total foi cancelada.")
                st.rerun()

    # ==========================================================
    # üîç LISTAGEM E VISUALIZA√á√ÉO DE HIST√ìRICO
    # ==========================================================
    history_entries = get_all_analysis_history()
    selected_id = st.query_params.get("analysis_id", [None])[0]

    # ----------------------------------------------------------
    # Modo de visualiza√ß√£o detalhada
    # ----------------------------------------------------------
    if selected_id:
        try:
            analysis_entry = get_analysis_by_id(int(selected_id))
        except (TypeError, ValueError):
            analysis_entry = None

        if analysis_entry:
            st.button("‚¨ÖÔ∏è Voltar para a lista", on_click=lambda: st.query_params.clear())
            st.markdown(f"### An√°lise de {analysis_entry['created_at']}")

            with st.expander("User Story Analisada", expanded=True):
                st.code(analysis_entry["user_story"], language="text")

            with st.expander("Relat√≥rio de An√°lise da IA", expanded=True):
                st.markdown(analysis_entry["analysis_report"])

            if analysis_entry["test_plan_report"]:
                with st.expander("Plano de Testes Gerado", expanded=True):
                    cleaned_report = clean_markdown_report(
                        analysis_entry["test_plan_report"]
                    )
                    st.markdown(cleaned_report)
        else:
            st.error("An√°lise n√£o encontrada.")
            st.button("‚¨ÖÔ∏è Voltar para a lista", on_click=lambda: st.query_params.clear())

    # ----------------------------------------------------------
    # Modo de listagem geral (todas as an√°lises)
    # ----------------------------------------------------------
    else:
        if not history_entries:
            st.info(
                "Ainda n√£o h√° an√°lises no hist√≥rico. Realize uma nova an√°lise para come√ßar."
            )
            return

        # Bot√£o que inicia a exclus√£o total
        if st.button("üóëÔ∏è Excluir TODO o Hist√≥rico"):
            st.session_state["confirm_clear_all"] = True
            st.rerun()

        st.divider()

        # Cria um card para cada item do hist√≥rico
        for entry in history_entries:
            with st.container(border=True):
                col1, col2 = st.columns([6, 1])
                with col1:
                    st.markdown(
                        f"**Data:** {entry['created_at']}  \n"
                        f"**User Story:** {entry['user_story'][:120]}..."
                    )

                # Bot√£o de exclus√£o individual
                with col2:
                    if st.button(
                        "üóëÔ∏è", key=f"del_{entry['id']}", help="Excluir esta an√°lise"
                    ):
                        st.session_state["confirm_delete_id"] = entry["id"]
                        st.rerun()

                # Bot√£o de ver detalhes
                if st.button(
                    "üîç Ver detalhes",
                    key=f"detalhes_{entry['id']}",
                    type="primary",
                    use_container_width=True,
                ):
                    st.query_params["analysis_id"] = str(entry["id"])
                    st.rerun()


# ==========================================================
# üö™ Fun√ß√£o principal ‚Äî inicializa o app QA Or√°culo
# ==========================================================
def main():
    """
    Fun√ß√£o principal da aplica√ß√£o Streamlit.

    Responsabilidades:
    ------------------
    ‚Ä¢ Configura layout e t√≠tulo da p√°gina.
    ‚Ä¢ Inicializa o banco de dados (SQLite).
    ‚Ä¢ Inicializa o estado global (session_state).
    ‚Ä¢ Cria o menu lateral de navega√ß√£o.
    ‚Ä¢ Carrega dinamicamente a p√°gina selecionada.

    Estrutura de navega√ß√£o:
      - "Analisar User Story" ‚Üí render_main_analysis_page()
      - "Hist√≥rico de An√°lises" ‚Üí render_history_page()
    """
    # ------------------------------------------------------
    # ‚öôÔ∏è Configura√ß√£o inicial da interface
    # ------------------------------------------------------
    st.set_page_config(page_title="QA Or√°culo", layout="wide")

    # ------------------------------------------------------
    # üß± Inicializa√ß√£o de banco e estado
    # ------------------------------------------------------
    # Garante que o banco (SQLite) e suas tabelas existam.
    # O init_db() √© idempotente ‚Äî pode ser chamado v√°rias vezes.
    init_db()

    # Inicializa vari√°veis persistentes no session_state
    initialize_state()

    # ------------------------------------------------------
    # üß≠ Mapa de p√°ginas (sidebar)
    # ------------------------------------------------------
    pages = {
        "Analisar User Story": render_main_analysis_page,
        "Hist√≥rico de An√°lises": render_history_page,
    }

    # Cria o menu lateral
    selected_page = st.sidebar.radio("Navega√ß√£o", list(pages.keys()))

    # Executa a fun√ß√£o da p√°gina selecionada
    pages[selected_page]()


# ==========================================================
# üß≠ Ponto de entrada do aplicativo
# ==========================================================
if __name__ == "__main__":
    # Quando o arquivo √© executado diretamente (ex.: `streamlit run app.py`),
    # o Python entra por este bloco, chamando a fun√ß√£o main().
    #
    # Essa abordagem garante:
    #   ‚Ä¢ Execu√ß√£o isolada (n√£o executa se for importado por testes)
    #   ‚Ä¢ Consist√™ncia entre desenvolvimento local e produ√ß√£o
    main()

# ==========================================================
# ‚úÖ FIM DO ARQUIVO ‚Äî QA OR√ÅCULO
# ==========================================================
# üîπ Este app segue o padr√£o modular QA Or√°culo:
#    - database.py    ‚Üí persist√™ncia
#    - utils.py       ‚Üí formata√ß√£o e exporta√ß√µes
#    - graph.py       ‚Üí integra√ß√£o com LangGraph
#    - pdf_generator.py ‚Üí relat√≥rios em PDF
#    - state_manager.py ‚Üí controle de estado Streamlit
#
# üîπ Fun√ß√µes cr√≠ticas cobertas por testes unit√°rios (pytest):
#    - Testes de fluxo (cria√ß√£o ‚Üí edi√ß√£o ‚Üí exporta√ß√£o)
#    - Testes de hist√≥rico (exclus√£o individual e total)
#    - Testes de gera√ß√£o de CSV (Azure) e XLSX (Zephyr)
#
# üîπ Requisitos de qualidade QA Or√°culo:
#    ‚Ä¢ PEP8 + Black
#    ‚Ä¢ A11Y (acessibilidade) ‚Äî labels e navega√ß√£o por teclado
#    ‚Ä¢ data-testid √∫nicos para automa√ß√£o E2E
#    ‚Ä¢ Banco test√°vel em mem√≥ria (SQLite :memory:)
# ==========================================================
