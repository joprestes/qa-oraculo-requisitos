# ==========================================================
# database.py ‚Äî M√≥dulo de Persist√™ncia de Dados (QA Or√°culo)
# ==========================================================
# üìò Respons√°vel por toda a comunica√ß√£o com o banco SQLite:
#    - Cria√ß√£o e inicializa√ß√£o do banco
#    - Salvamento e leitura de an√°lises realizadas
#    - Exclus√£o individual e total de registros
#
# üéØ Princ√≠pios QA Or√°culo:
#    ‚Ä¢ Banco test√°vel em mem√≥ria (usando SQLite :memory:)
#    ‚Ä¢ Transa√ß√µes seguras e idempotentes (commit sob with)
#    ‚Ä¢ Acesso simplificado via RowFactory (dict-like)
#    ‚Ä¢ Compat√≠vel com pytest e automa√ß√µes de hist√≥rico
#
# üß© Boas Pr√°ticas:
#    - Nenhum dado sens√≠vel √© persistido.
#    - Campos None s√£o substitu√≠dos por mensagens de fallback.
#    - Todas as fun√ß√µes lidam com exce√ß√µes de forma segura.
# ==========================================================
import datetime
import sqlite3
import threading
from contextlib import contextmanager

# Adaptador: Python datetime -> str
sqlite3.register_adapter(datetime.datetime, lambda val: val.isoformat())

# Conversor: str -> Python datetime
sqlite3.register_converter(
    "timestamp", lambda val: datetime.datetime.fromisoformat(val.decode("utf-8"))
)

DB_NAME = "qa_oraculo_history.db"


def get_db_connection():
    """
    Cria uma conex√£o com o banco de dados SQLite.
    Usa row_factory para permitir acesso por chave (dict-like).
    """
    conn = sqlite3.connect(
        DB_NAME, check_same_thread=False, detect_types=sqlite3.PARSE_DECLTYPES
    )
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    """
    Cria a tabela de hist√≥rico de an√°lises se n√£o existir.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                """
            CREATE TABLE IF NOT EXISTS analysis_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                created_at TIMESTAMP NOT NULL,
                user_story TEXT NOT NULL,
                analysis_report TEXT,
                test_plan_report TEXT
            );
            """
            )
            conn.commit()
    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao inicializar DB: {e}")


# Lock global para garantir atomicidade em ambientes multi-thread
_save_lock = threading.Lock()


@contextmanager
def atomic_transaction():
    """
    Context manager para opera√ß√µes at√¥micas no banco.

    Garante que m√∫ltiplas escritas simult√¢neas n√£o corrompam dados.
    Faz rollback autom√°tico em caso de erro.

    Uso:
        with atomic_transaction() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT ...")
            # commit autom√°tico ao sair do bloco
    """
    with _save_lock:
        conn = get_db_connection()
        try:
            yield conn
            conn.commit()
            print("‚úÖ Transa√ß√£o commitada com sucesso")
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Erro na transa√ß√£o, rollback executado: {e}")
            raise
        finally:
            conn.close()


def save_or_update_analysis(
    user_story: str,
    analysis_report: str,
    test_plan_report: str | None = None,
    existing_id: int | None = None,
) -> int:
    """
    Salva ou atualiza an√°lise de forma at√¥mica e segura.

    Args:
        user_story: Texto da User Story (obrigat√≥rio)
        analysis_report: Relat√≥rio de an√°lise (obrigat√≥rio)
        test_plan_report: Plano de testes (opcional)
        existing_id: ID para atualizar (None = novo registro)

    Returns:
        int: ID do registro salvo/atualizado

    Raises:
        ValueError: Se user_story ou analysis_report estiverem vazios
        sqlite3.Error: Em caso de erro no banco
    """
    # Valida√ß√£o de entrada
    if not user_story or not user_story.strip():
        raise ValueError("User Story n√£o pode estar vazia")

    if not analysis_report or not analysis_report.strip():
        raise ValueError("Relat√≥rio de an√°lise n√£o pode estar vazio")

    # Sanitiza√ß√£o (mant√©m compatibilidade com c√≥digo legado)
    user_story = user_story.strip()
    analysis_report = analysis_report.strip()
    test_plan_report = (test_plan_report or "").strip()

    with atomic_transaction() as conn:
        cursor = conn.cursor()
        timestamp = datetime.datetime.now()

        if existing_id:
            # ATUALIZA√á√ÉO de registro existente
            cursor.execute(
                """
                UPDATE analysis_history
                SET created_at = ?,
                    user_story = ?,
                    analysis_report = ?,
                    test_plan_report = ?
                WHERE id = ?
                """,
                (timestamp, user_story, analysis_report, test_plan_report, existing_id),
            )

            if cursor.rowcount == 0:
                raise ValueError(f"Registro com ID {existing_id} n√£o existe")

            print(f"‚ôªÔ∏è Registro {existing_id} atualizado em {timestamp}")
            return existing_id

        else:
            # CRIA√á√ÉO de novo registro
            cursor.execute(
                """
                INSERT INTO analysis_history
                (created_at, user_story, analysis_report, test_plan_report)
                VALUES (?, ?, ?, ?)
                """,
                (timestamp, user_story, analysis_report, test_plan_report),
            )

            new_id = cursor.lastrowid
            print(f"üíæ Novo registro criado: ID {new_id} em {timestamp}")
            return new_id


# ==========================================================
# FUN√á√ÉO DE MIGRA√á√ÉO
# ==========================================================
def migrate_to_atomic_saves():
    """
    Fun√ß√£o helper para migrar c√≥digo legado que usa save_analysis_to_history().

    N√£o precisa ser chamada diretamente, apenas documenta√ß√£o.

    ANTES (c√≥digo legado):
        save_analysis_to_history(us, analysis, plan)

    DEPOIS (novo c√≥digo):
        history_id = save_or_update_analysis(us, analysis, plan)
        state.mark_as_saved(history_id)
    """
    # Apenas documenta√ß√£o


def save_analysis_to_history(
    user_story: str, analysis_report: str, test_plan_report: str
):
    """
    Salva uma nova an√°lise no hist√≥rico.
    üîí Corre√ß√£o QA Or√°culo:
        - Evita NoneType nos campos.
        - Garante fallback textual caso o Gemini falhe.
        - Mant√©m compatibilidade total com a estrutura original.
    """
    try:
        # Sanitiza os campos para evitar valores nulos
        user_story = user_story or "‚ö†Ô∏è User Story n√£o dispon√≠vel."
        analysis_report = analysis_report or "‚ö†Ô∏è Relat√≥rio de an√°lise n√£o dispon√≠vel."
        test_plan_report = (
            test_plan_report
            or "‚ö†Ô∏è Plano de Testes n√£o dispon√≠vel ou n√£o p√¥de ser gerado."
        )

        with get_db_connection() as conn:
            cursor = conn.cursor()
            timestamp = datetime.datetime.now()  # TIMESTAMP real, n√£o string
            cursor.execute(
                """
            INSERT INTO analysis_history (created_at, user_story, analysis_report, test_plan_report)
            VALUES (?, ?, ?, ?);
            """,
                (timestamp, user_story, analysis_report, test_plan_report),
            )
            conn.commit()
            print(f"üíæ An√°lise salva no hist√≥rico em {timestamp}")
    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao salvar an√°lise: {e}")


def get_all_analysis_history():
    """
    Retorna todas as an√°lises do hist√≥rico, ordenadas por data de cria√ß√£o.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id, created_at, user_story FROM analysis_history ORDER BY created_at DESC;"
            )
            return cursor.fetchall()
    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao buscar hist√≥rico: {e}")
        return []


def get_analysis_by_id(analysis_id: int):
    """
    Busca uma an√°lise espec√≠fica pelo ID.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            # üîß converte para inteiro de forma segura
            cursor.execute(
                "SELECT * FROM analysis_history WHERE id = ?;", (int(analysis_id),)
            )
            row = cursor.fetchone()
            if row is not None:
                return dict(row)
            return None

    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao buscar an√°lise {analysis_id}: {e}")
        return None
    except (ValueError, TypeError):
        print(f"[DB ERROR] ID inv√°lido fornecido: {analysis_id}")
        return None


def delete_analysis_by_id(entry_id: int) -> bool:
    """
    Deleta uma an√°lise espec√≠fica pelo ID.
    Retorna True se algo foi deletado, False caso contr√°rio.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM analysis_history WHERE id = ?", (entry_id,))
            conn.commit()
            return cursor.rowcount > 0
    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao deletar an√°lise {entry_id}: {e}")
        return False


def clear_history() -> int:
    """
    Remove todas as an√°lises do hist√≥rico.
    Retorna o n√∫mero de registros apagados.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM analysis_history")
            conn.commit()
            return cursor.rowcount
    except sqlite3.Error as e:
        print(f"[DB ERROR] Falha ao limpar hist√≥rico: {e}")
        return 0
