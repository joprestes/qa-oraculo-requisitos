import os
import json
import re
import google.generativeai as genai
from dotenv import load_dotenv
from typing import TypedDict, List, Dict, Any
import time
from google.api_core.exceptions import ResourceExhausted

# --- Imports do LangGraph ---
from langgraph.graph import StateGraph, START, END

# --- Fun√ß√µes Auxiliares ---

def extrair_json_da_resposta(texto_resposta: str) -> str | None:
    """Extrai uma string JSON de dentro de um texto bruto, limpando formata√ß√£o Markdown."""
    match = re.search(r"```json\s*([\s\S]*?)\s*```", texto_resposta)
    if match:
        return match.group(1).strip()
    match = re.search(r"(\{[\s\S]*\}|\[[\s\S]*\])", texto_resposta)
    if match:
        return match.group(0).strip()
    return None

def chamar_modelo_com_retry(model, prompt_completo, tentativas=3, espera=60):
    """
    Fun√ß√£o wrapper que chama a IA, com l√≥gica de retry para erros de cota.
    """
    for tentativa in range(tentativas):
        try:
            # Tenta fazer a chamada √† API
            resposta = model.generate_content(prompt_completo)
            return resposta # Se bem-sucedido, retorna a resposta
        
        except ResourceExhausted as e:
            print(f"‚ö†Ô∏è Alerta de Limite de API (Tentativa {tentativa + 1}/{tentativas}): {e.message}")
            if tentativa < tentativas - 1:
                print(f"Aguardando {espera} segundos para tentar novamente...")
                time.sleep(espera) # Pausa a execu√ß√£o
            else:
                print("‚ùå Esgotado o n√∫mero de tentativas. A chamada √† API falhou.")
                return None # Se todas as tentativas falharem, retorna None
        
        except Exception as e:
            # Captura outros erros inesperados
            print(f"‚ùå Ocorreu um erro inesperado na chamada √† API: {e}")
            return None
    return None

# --- CONFIGURA√á√ïES GLOBAIS ---
NOME_MODELO = "gemini-1.5-flash"
CONFIG_GERACAO_ANALISE = {"temperature": 0.2}
CONFIG_GERACAO_RELATORIO = {"temperature": 0.3}

# --- Configura√ß√£o Inicial da API ---
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# --- Prompts dos Especialistas ---

PROMPT_ANALISE_US = """
Voc√™ √© um Analista de QA S√™nior com vasta experi√™ncia em metodologias √°geis e um profundo entendimento de neg√≥cios.
Sua tarefa √© analisar a User Story (US) a seguir e fornecer um feedback estruturado para o QA do time.
A an√°lise deve ser completa, c√©tica e focada em garantir que a hist√≥ria seja test√°vel e que todas as ambiguidades sejam resolvidas ANTES do desenvolvimento come√ßar.
Para a User Story fornecida, sua resposta deve ser APENAS um objeto JSON com a seguinte estrutura:
{
  "analise_ambiguidade": {
    "avaliacao_geral": "Uma avalia√ß√£o de 1 a 2 frases sobre a clareza da US.",
    "pontos_ambiguos": ["Liste aqui cada ponto vago, termo subjetivo (ex: 'r√°pido', 'f√°cil'), ou informa√ß√£o faltante que voc√™ encontrou."]
  },
  "perguntas_para_po": ["Formule uma lista de perguntas claras e espec√≠ficas que o QA deve fazer ao Product Owner (PO) para esclarecer cada um dos pontos amb√≠guos. As perguntas devem ser acion√°veis."],
  "sugestao_criterios_aceite": [
    "Com base no seu entendimento da US, escreva uma lista inicial de Crit√©rios de Aceite (ACs) em formato de lista simples e direta. Cada crit√©rio deve ser uma afirma√ß√£o verific√°vel."]
}
N√ÉO adicione nenhum texto introdut√≥rio. Sua resposta deve come√ßar com '{' e terminar com '}'.
"""

PROMPT_GERAR_RELATORIO_ANALISE  = """
Voc√™ √© um Escritor T√©cnico criando um relat√≥rio de an√°lise de uma User Story para um time √°gil.
Use os dados JSON fornecidos para gerar um relat√≥rio claro e bem formatado em Markdown.

**Estrutura do Relat√≥rio:**
1. T√≠tulo: `# An√°lise da User Story`.
2. Se√ß√£o `## User Story Analisada`: Apresente a US original.
3. Se√ß√£o `## üîç An√°lise de Ambiguidade`: Apresente a avalia√ß√£o geral e a lista de pontos amb√≠guos.
4. Se√ß√£o `## ‚ùì Perguntas para o Product Owner`: Liste as perguntas que o QA deve fazer.
5. Se√ß√£o `## ‚úÖ Sugest√£o de Crit√©rios de Aceite`: Liste os ACs sugeridos como uma lista de marcadores.

Use a formata√ß√£o Markdown para melhorar a legibilidade.
"""

PROMPT_CRIAR_PLANO_DE_TESTES = """
Voc√™ √© um Engenheiro de QA S√™nior, especialista em Estrat√©gia de Testes, BDD e Acessibilidade Web (A11y).
Seu pensamento √© cr√≠tico, detalhista e focado em encontrar cen√°rios de borda e garantir que a aplica√ß√£o seja utiliz√°vel por todos.
Sua tarefa √© usar a User Story e a an√°lise de ambiguidades fornecidas para criar um Plano de Testes conciso e gerar Casos de Teste detalhados e de alta qualidade em formato Gherkin.

**Diretrizes para Casos de Teste:**
- Cubra o caminho feliz.
- Cubra os caminhos negativos e de erro (ex: permiss√µes, dados inv√°lidos).
- Pense em cen√°rios de borda (ex: valores limite, dados vazios, caracteres especiais).
- **Inclua cen√°rios de acessibilidade (ex: navega√ß√£o por teclado, leitores de tela, contraste de cores).**
- Cada cen√°rio Gherkin deve ser claro, conciso e testar uma √∫nica condi√ß√£o.

Sua resposta deve ser APENAS um objeto JSON com a seguinte estrutura:
{
  "plano_de_testes": {
    "objetivo": "O objetivo principal dos testes para esta User Story.",
    "escopo": {
      "dentro_do_escopo": ["Liste aqui o que SER√Å testado."],
      "fora_do_escopo": ["Liste aqui o que N√ÉO SER√Å testado."]
    },
    "estrategia_de_testes": "Descreva a abordagem.",
    "recursos_necessarios": ["Liste os recursos e a massa de dados necess√°rios."]
  },
  "casos_de_teste_gherkin": [
    {
      "id": "CT-001",
      "titulo": "Um t√≠tulo claro e conciso.",
      "cenario": [
        "Dado que [contexto ou pr√©-condi√ß√£o].",
        "E [outra pr√©-condi√ß√£o, se necess√°rio].",
        "Quando [a a√ß√£o do usu√°rio ocorre].",
        "Ent√£o [o resultado observ√°vel esperado acontece]."
      ]
    }
  ]
}

**EXEMPLO DE ALTA QUALIDADE PARA UM CASO DE TESTE DE ACESSIBILIDADE:**
Se a US fosse sobre um formul√°rio de login, um bom caso de teste de acessibilidade seria:
{
  "id": "CT-A11Y-01",
  "titulo": "Navega√ß√£o por teclado no formul√°rio de login",
  "cenario": [
    "Dado que a p√°gina de login est√° completamente carregada",
    "E o foco est√° no primeiro elemento interativo",
    "Quando eu pressiono a tecla 'Tab' repetidamente",
    "Ent√£o o foco deve navegar logicamente por todos os elementos interativos (email, senha, bot√£o 'Entrar', link 'Esqueci minha senha')",
    "E a ordem da navega√ß√£o deve ser visualmente l√≥gica",
    "E o elemento focado deve ter um indicador visual claro (outline)."
  ]
}
"""

PROMPT_GERAR_RELATORIO_COMPLETO = """
Voc√™ √© um Escritor T√©cnico criando um relat√≥rio de an√°lise de uma User Story para um time √°gil.
Use os dados JSON fornecidos para gerar um relat√≥rio COMPLETO em Markdown, combinando a an√°lise inicial com o plano de testes.

**Estrutura do Relat√≥rio:**
1. T√≠tulo: `# An√°lise da User Story e Plano de Testes`.
2. Se√ß√£o `## User Story Analisada`: Apresente a US original.
3. Se√ß√£o `## üîç An√°lise de Ambiguidade`: Apresente a avalia√ß√£o geral e a lista de pontos amb√≠guos.
4. Se√ß√£o `## ‚ùì Perguntas para o Product Owner`: Liste as perguntas que o QA deve fazer.
5. Se√ß√£o `## ‚úÖ Sugest√£o de Crit√©rios de Aceite`: Liste os ACs sugeridos como uma lista de marcadores.
6. Se√ß√£o `## üìù Plano de Testes Sugerido`: Apresente o objetivo, escopo, estrat√©gia e recursos.
7. Se√ß√£o `## üß™ Casos de Teste (Gherkin)`: Para cada caso de teste, crie um subt√≠tulo `### {id}: {titulo}` e apresente o cen√°rio Gherkin em um bloco de c√≥digo.

Use a formata√ß√£o Markdown para melhorar a legibilidade.
"""

# --- Estado do Agente (AgentState) Simplificado ---

class AgentState(TypedDict):
    user_story: str
    analise_da_us: Dict[str, Any]
    relatorio_analise_inicial: str 
    decisao_usuario_plano_testes: str
    plano_e_casos_de_teste: Dict[str, Any]
    relatorio_final_completo: str   



# --- N√≥s do Grafo Simplificado ---

def node_analisar_historia(state: AgentState) -> AgentState:
    """N√≥ 1: Pega a User Story e usa a IA para gerar a an√°lise completa."""
    print("--- Etapa 1: Analisando a User Story... ---")
    us = state["user_story"]
    
    model = genai.GenerativeModel(NOME_MODELO, generation_config=CONFIG_GERACAO_ANALISE)
    prompt_completo = f"{PROMPT_ANALISE_US}\n\nUser Story para An√°lise:\n---\n{us}"
    
    # --- L√ìGICA CORRIGIDA ---
    
    response = chamar_modelo_com_retry(model, prompt_completo)
    analise_json = {}

    if not response or not response.text:
        # Se a chamada com retry falhou, response ser√° None ou sem texto
        print("‚ùå Falha na comunica√ß√£o com a API ap√≥s m√∫ltiplas tentativas.")
        analise_json = {"erro": "Falha na comunica√ß√£o com a API ap√≥s m√∫ltiplas tentativas."}
    else:
        # A chamada √† API foi bem-sucedida, agora tentamos processar o texto
        json_limpo = extrair_json_da_resposta(response.text)
        
        if json_limpo:
            try:
                analise_json = json.loads(json_limpo)
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Alerta: A IA retornou um JSON mal formatado.")
                analise_json = {"erro": "Falha ao decodificar o JSON da an√°lise."}
        else:
            print("‚ö†Ô∏è Alerta: A IA n√£o retornou um JSON em sua resposta.")
            analise_json = {"erro": "Nenhum JSON encontrado na resposta da IA."}
        
    return {"analise_da_us": analise_json}

def node_gerar_relatorio_analise(state: AgentState) -> AgentState:
    print("--- Etapa 2: Compilando relat√≥rio de an√°lise inicial... ---")
    contexto = {
        "user_story_original": state["user_story"],
        "analise": state.get("analise_da_us", {})
    }
    contexto_str = json.dumps(contexto, indent=2, ensure_ascii=False)
    model = genai.GenerativeModel(NOME_MODELO, generation_config=CONFIG_GERACAO_RELATORIO)
    prompt_completo = f"{PROMPT_GERAR_RELATORIO_ANALISE}\n\nDados:\n---\n{contexto_str}"

    response = chamar_modelo_com_retry(model, prompt_completo)
    
    # Verifica se a chamada foi bem-sucedida e tem texto
    if response and response.text:
        # Se sim, retorna o relat√≥rio
        return {"relatorio_analise_inicial": response.text}
    else:
        # Se falhou, retorna uma mensagem de erro como o relat√≥rio
        print("‚ùå Falha ao gerar o relat√≥rio de an√°lise inicial.")
        relatorio_de_erro = "# Erro na Gera√ß√£o do Relat√≥rio\n\nA comunica√ß√£o com a API falhou ap√≥s m√∫ltiplas tentativas."
        return {"relatorio_analise_inicial": relatorio_de_erro}

def node_perguntar_plano_de_testes(state: AgentState) -> AgentState:
    """N√≥ Intermedi√°rio: Mostra o relat√≥rio inicial e pergunta ao usu√°rio."""
    print("\n--- ‚úÖ Relat√≥rio de An√°lise Inicial Gerado ---")
    print(state.get("relatorio_analise_inicial", "Erro ao gerar relat√≥rio inicial."))
    print("-------------------------------------------\n")
    
    resposta = input("Deseja prosseguir com a cria√ß√£o do Plano e Casos de Teste? (s/n): ").lower()
    return {"decisao_usuario_plano_testes": resposta}

def node_criar_plano_e_casos_de_teste(state: AgentState) -> AgentState:
    """N√≥ Opcional: Usa a IA para gerar o Plano de Testes e os Casos de Teste em Gherkin."""
    print("--- Etapa Extra: Criando Plano e Casos de Teste... ---")

    contexto_para_plano = {
        "user_story": state["user_story"],
        "analise_ambiguidade": state["analise_da_us"].get("analise_ambiguidade", {})
    }
    contexto_str = json.dumps(contexto_para_plano, indent=2, ensure_ascii=False)

    model = genai.GenerativeModel(NOME_MODELO, generation_config=CONFIG_GERACAO_ANALISE)
    prompt_completo = f"{PROMPT_CRIAR_PLANO_DE_TESTES}\n\nContexto:\n---\n{contexto_str}"

    # --- L√ìGICA ROBUSTA APLICADA AQUI ---
    
    response = chamar_modelo_com_retry(model, prompt_completo)
    plano_json = {}

    if not response or not response.text:
        # Se a chamada com retry falhou
        print("‚ùå Falha na comunica√ß√£o com a API para criar o plano de testes.")
        plano_json = {"erro": "Falha na comunica√ß√£o com a API ap√≥s m√∫ltiplas tentativas."}
    else:
        # A chamada foi bem-sucedida, agora processamos o texto
        json_limpo = extrair_json_da_resposta(response.text)
        
        if json_limpo:
            try:
                plano_json = json.loads(json_limpo)
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Alerta: A IA retornou um JSON mal formatado para o plano de testes.")
                plano_json = {"erro": "Falha ao decodificar o JSON do plano de testes."}
        else:
            print("‚ö†Ô∏è Alerta: A IA n√£o retornou um JSON em sua resposta para o plano de testes.")
            plano_json = {"erro": "Nenhum JSON encontrado na resposta da IA."}

    return {"plano_e_casos_de_teste": plano_json}

def node_gerar_relatorio_completo(state: AgentState) -> AgentState:
    """N√≥ Final: Consolida TODA a an√°lise em um relat√≥rio final em Markdown."""
    print("--- Etapa 4: Compilando o relat√≥rio completo... ---")
    
    contexto = {
        "user_story_original": state["user_story"],
        "analise": state.get("analise_da_us", {}),
        "plano_de_testes": state.get("plano_e_casos_de_teste")
    }
    
    contexto_str = json.dumps(contexto, indent=2, ensure_ascii=False)
    model = genai.GenerativeModel(NOME_MODELO, generation_config=CONFIG_GERACAO_RELATORIO)
    prompt_completo = f"{PROMPT_GERAR_RELATORIO_COMPLETO}\n\nDados:\n---\n{contexto_str}"

    response = chamar_modelo_com_retry(model, prompt_completo)
    
    # Verifica se a chamada foi bem-sucedida e tem texto
    if response and response.text:
        # Se sim, retorna o relat√≥rio completo
        return {"relatorio_final_completo": response.text}
    else:
        # Se falhou, retorna uma mensagem de erro como o relat√≥rio final
        print("‚ùå Falha ao gerar o relat√≥rio completo.")
        relatorio_de_erro = "# Erro na Gera√ß√£o do Relat√≥rio Final\n\nA comunica√ß√£o com a API falhou ap√≥s m√∫ltiplas tentativas."
        return {"relatorio_final_completo": relatorio_de_erro}

# --- Constru√ß√£o do Grafo ---
def decidir_proximo_passo(state: AgentState):
    """Decide se o fluxo deve gerar o plano de testes ou terminar."""
    if state.get("decisao_usuario_plano_testes") == "s":
        return "criar_plano_e_casos"
    else:
        return "fim" # Rota para terminar o grafo

# --- Constru√ß√£o do Grafo ---
workflow = StateGraph(AgentState)

workflow.add_node("analista_us", node_analisar_historia)
workflow.add_node("gerador_relatorio_analise", node_gerar_relatorio_analise)
workflow.add_node("perguntar_usuario", node_perguntar_plano_de_testes)
workflow.add_node("criador_plano_testes", node_criar_plano_e_casos_de_teste)
workflow.add_node("gerador_relatorio_completo", node_gerar_relatorio_completo)

workflow.set_entry_point("analista_us")
workflow.add_edge("analista_us", "gerador_relatorio_analise")
workflow.add_edge("gerador_relatorio_analise", "perguntar_usuario")
workflow.add_conditional_edges(
    "perguntar_usuario",
    decidir_proximo_passo,
    {
        "criar_plano_e_casos": "criador_plano_testes",
        "fim": END  # Se a decis√£o for 'fim', o grafo termina aqui.
    }
)
workflow.add_edge("criador_plano_testes", "gerador_relatorio_completo")
workflow.add_edge("gerador_relatorio_completo", END)

grafo = workflow.compile()

# --- Execu√ß√£o ---
def main():
    print("--- üîÆ Iniciando An√°lise de User Story com QA Or√°culo ---")
    USER_STORY_EXEMPLO = "Como um usu√°rio premium, eu quero poder exportar meu relat√≥rio de atividades para um arquivo CSV, para que eu possa fazer uma an√°lise mais aprofundada em outra ferramenta."
    inputs = {"user_story": USER_STORY_EXEMPLO}
    
    resultado_final = grafo.invoke(inputs)
    
    print("\n--- üöÄ Processo Finalizado ---")
    if "relatorio_final_completo" in resultado_final:
        print("\n--- ‚úÖ Relat√≥rio Completo Gerado com Sucesso ---")
        print(resultado_final.get("relatorio_final_completo"))
        print("---------------------------------------------")
    else:
        # Se n√£o gerou o relat√≥rio completo, significa que o usu√°rio parou ap√≥s a an√°lise inicial.
        print("Finalizado ap√≥s a an√°lise inicial. O relat√≥rio foi exibido acima.")

if __name__ == "__main__":
    main()