---
# =====================================================================
# üöÄ CI - Integra√ß√£o Cont√≠nua do QA Or√°culo
# ---------------------------------------------------------------------
# Este workflow √© executado automaticamente em todo push ou pull request.
# Ele garante a qualidade do c√≥digo antes de ser fundido na branch main.
#
# O que ele faz:
# 1. Verifica se o c√≥digo segue PEP8 usando o Black.
# 2. Roda o Ruff (lint) para detectar m√°s pr√°ticas, imports e bugs comuns.
# 3. Executa todos os testes unit√°rios com pytest.
# 4. Gera relat√≥rio de cobertura de testes.
# 5. Falha o pipeline se a cobertura for menor que 95%.
# =====================================================================

name: CI

# ---------------------------------------------------------------------
# üîî Gatilhos de execu√ß√£o
# Executa este workflow quando:
# - houver push na branch main
# - ou quando um Pull Request for aberto para main
# ---------------------------------------------------------------------
on:
  pull_request: {}
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      python_version:
        description: "Vers√£o do Python a ser testada (opcional)"
        required: false
        default: "3.12"
# ---------------------------------------------------------------------
# üë∑ Defini√ß√£o dos jobs (etapas)
# Cada job roda em um ambiente isolado (VM Linux no GitHub).
# ---------------------------------------------------------------------
jobs:
  test:
    runs-on: ubuntu-latest  # sistema operacional do runner

    # -----------------------------------------------------------------
    # Estrat√©gia de matriz ‚Üí roda o mesmo job em v√°rias vers√µes do Python
    # Isso garante compatibilidade futura do projeto.
    # -----------------------------------------------------------------
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
      # ---------------------------------------------------------------
      # 1Ô∏è‚É£ Baixa o c√≥digo do reposit√≥rio para dentro do runner
      # ---------------------------------------------------------------
      - uses: actions/checkout@v4

      # ---------------------------------------------------------------
      # 2Ô∏è‚É£ Configura o Python na vers√£o especificada na matriz
      # ---------------------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ---------------------------------------------------------------
      # 3Ô∏è‚É£ Cache das depend√™ncias pip
      # Se requirements.txt n√£o mudou, reaproveita pacotes j√° instalados
      # ---------------------------------------------------------------
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

      # ---------------------------------------------------------------
      # 4Ô∏è‚É£ Instala depend√™ncias do projeto e ferramentas de qualidade
      # ---------------------------------------------------------------
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black ruff pytest pytest-cov

      # ---------------------------------------------------------------
      # 5Ô∏è‚É£ Verifica formata√ß√£o com Black
      # Se algum arquivo n√£o estiver no padr√£o, o job falha
      # ---------------------------------------------------------------
      - name: Lint (Black check)
        run: black --check .

      # ---------------------------------------------------------------
      # 6Ô∏è‚É£ Analisa m√°s pr√°ticas com Ruff (lint)
      # ---------------------------------------------------------------
      - name: Lint (Ruff)
        run: ruff check .

      # ---------------------------------------------------------------
      # 7Ô∏è‚É£ Executa testes e gera relat√≥rio de cobertura em XML
      # ---------------------------------------------------------------
      - name: Run tests + coverage (XML)
        run: |
          pytest \
            --cov=app \
            --cov=database \
            --cov=graph \
            --cov=pdf_generator \
            --cov=state_manager \
            --cov=utils \
            --cov-report=xml

      # ---------------------------------------------------------------
      # 8Ô∏è‚É£ Verifica se a cobertura de testes √© >= 95%
      # Se n√£o for, falha o workflow
      # ---------------------------------------------------------------
      - name: "Gate - verifica se cobertura √© suficiente"
        run: |
          python - <<EOF
          import xml.etree.ElementTree as ET

          # L√™ o arquivo coverage.xml gerado pelo pytest
          r = ET.parse('coverage.xml').getroot().attrib

          # Extrai o percentual de cobertura
          cov = float(r['line-rate']) * 100
          print(f'üìä Cobertura total: {cov:.2f}%')

          if cov < 95.0:
              print("‚ùå Cobertura abaixo do m√≠nimo exigido (95%)")
              exit(1)
          else:
              print("‚úÖ Cobertura m√≠nima atingida!")
          EOF
